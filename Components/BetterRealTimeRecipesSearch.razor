@inject DBService DbService;

<div class="row mb-3">
    <div class="col">
        <input type="text" class="form-control" placeholder="Search ingredients..." @bind="_searchBarInput"
               @oninput="OnInputChange"
               @onfocus="OnSearchBarFocus" @onblur="OnSearchBarBlur">
    </div>
    @if (_isSearchBarActive && _searchBarInput != string.Empty)
    {
        <div class="dropdown">
            <ul class="dropdown-menu show"> @* "show" is vital, since it automatically shows the items. *@
                @if (_isLoading)
                {
                    <li>
                        <button class="dropdown-item" type="button">Loading...</button>
                    </li>
                }
                else
                {
                    @if (_recipeNames.Count != 0)
                    {
                        @foreach (var ingredient in _recipeNames)
                        {
                            <li>
                                <a class="dropdown-item"
                                   onclick="@(() => HandleIngredientItem(ingredient))">@ingredient</a>
                            </li>
                        }
                    }
                    else
                    {
                        <li>
                            <button class="dropdown-item" type="button">No results found</button>
                        </li>
                    }
                }
            </ul>
        </div>
    }
</div>
@*@if (CurrentRecipeData != null)
{
    <PreviewRecipe CurrentPreviewRecipe="CurrentRecipeData"/>
}*@
<StatusMessageToast @ref="_statusMessageToaster"/>

@code{
    private string _searchBarInput = string.Empty;
    private bool _isSearchBarActive = false;
    private bool _isLoading;
    private List<string> _recipeNames { get; set; } = [];
    [Parameter] public required Recipe CurrentRecipeData { get; set; }
    [Parameter] public EventCallback<Recipe> CurrentRecipeDataHasChanged { get; set; }
    StatusMessageToast _statusMessageToaster = new();

    private async Task HandleIngredientItem(string name)
    {
        var result = await DbService.GetRecipeByName(name);
        if (result.Recipe == null)
        {
            await _statusMessageToaster.ShowToastAsync(result.Message);
        }
        else
        {
            CurrentRecipeData = result.Recipe;
            await CurrentRecipeDataHasChanged.InvokeAsync(CurrentRecipeData);
            StateHasChanged();
        }
    }

    private async Task OnInputChange(ChangeEventArgs e)
    {
        // Console.WriteLine("Input has changed...");
        _searchBarInput = e.Value?.ToString() ?? string.Empty; // "??" checks what value is not null and chooses the non-null value.
        if (_searchBarInput != "")
        {
            _isLoading = true;
            StateHasChanged();
            var result = await DbService.GetRecipesByNameSearch(_searchBarInput);
            if (result.recipeNames != null)
            {
                _recipeNames = result.recipeNames;
                await _statusMessageToaster.ShowToastAsync(result.message);
            }
            else
            {
                await _statusMessageToaster.ShowToastAsync(result.message);
            }
        }

        _isLoading = false;
        Console.WriteLine($"Input changed: {_searchBarInput}");
    }


    private void OnSearchBarFocus()
    {
        // Console.WriteLine("Search bar is active...");
        _isSearchBarActive = true;
        StateHasChanged();
    }

    private async Task OnSearchBarBlur()
    {
        // To make sure that we can click the elements in our dropdown items, we have to use this scuffed delay to make
        // sure the item does not disappear, before we can actually click it.
        await Task.Delay(200);
        // Console.WriteLine("Search bar is no longer active...");
        _isSearchBarActive = false;
        StateHasChanged();
    }

}
