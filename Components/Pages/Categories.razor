@page "/categories"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents;
@inject DBService DbService;

<PageTitle>Categories</PageTitle>

<div class="dropdown center-element">
    <a class="btn btn-primary custom-layout dropdown-toggle btn-lg" href="#" role="button" data-bs-toggle="dropdown"
       aria-expanded="false">
        Search by...
    </a>

    <ul class="dropdown-menu">
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("name", ""))">Name</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("meal_type", ""))">Meal
                type
            </button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("calories", ""))">Calories
            </button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("carbs", ""))">Carbs
            </button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("fats", ""))">Fat</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("protein", ""))">Protein
            </button>
        </li>
    </ul>
</div>

@if (sortedRecipes != null)
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @if (sortedRecipes.Count != 0)
        {
            @foreach (var recipe in sortedRecipes)
            {
                <div class="col" style="padding: 10px">
                    <div class="card h-100 border-layout">
                        <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..." class="card-img"/>
                        <div class="card-header">
                            <h4>@recipe.RecipeId. @recipe.Name</h4>
                        </div>
                        <div class="card-body border-primary">
                            <p class="card-text">
                                - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                                - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                                - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                                - Protein: @recipe.TotalMacros.Protein.ToString("0")
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}
else
{
    <p>sorted recipes = null</p>
}

<StatusMessageToast @ref="statusMessageToaster"/>

@code{
    List<Recipe>? sortedRecipes;
    StatusMessageToast? statusMessageToaster;

    private async Task HandleSearchOption(string searchOption, string sortingDirection)
    {
        var result = await DbService.GetRecipesByCategory(searchOption, sortingDirection);
        if (result.recipes == null)
        {
            if (statusMessageToaster != null)
                await statusMessageToaster.ShowToastAsync("Getting recipes failed; " + result.message);
        }
        else
        {
            sortedRecipes = result.recipes;
            if (statusMessageToaster != null)
                await statusMessageToaster.ShowToastAsync("Successfully retrieved sorted recipes.");
            foreach (var recipe in sortedRecipes)
            {
                Console.WriteLine(recipe.Name);
            }

            StateHasChanged();
        }
    }

}