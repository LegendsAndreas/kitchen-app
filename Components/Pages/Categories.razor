@page "/categories"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents;
@inject DBService DbService;

<PageTitle>Categories</PageTitle>

<p>DEVELOPERS NOTE: Not the best sort by category page. I should just make one big card where you can set all the
    elements that you want to search by.</p>

<div class="container" style="background-color: #2b3035; padding: 10px; border-radius: 5px;">
    <div class="row row-cols-5">
        @* Base *@
        <div class="col">
            <input type="text" class="form-control" placeholder="Order by..." aria-label="Search by name"
                   @bind="baseCategory" @onfocus="OnBaseSearchBarFocus" @onblur="OnBaseSearchBarBlur">
            @if (isBaseSearchBarActive)
            {
                <div class="dropdown">
                    <ul class="dropdown-menu show"> @* "show" is vital, since it automatically shows the items. *@
                        <li>
                            <a class="dropdown-item"
                               onclick="@(() => HandleBaseCategory("meal Type"))">Meal Type</a>
                        </li>
                        <li>
                            <a class="dropdown-item"
                               onclick="@(() => HandleBaseCategory("name"))">Name</a>
                        </li>
                        <li>
                            <a class="dropdown-item"
                               onclick="@(() => HandleBaseCategory("macros"))">Macros</a>
                        </li>
                    </ul>
                </div>
            }
        </div>
        @* Secondary *@
        <div class="col">
            @if (baseCategory != "")
            {
                if (baseCategory == "meal Type")
                {
                    <select class="form-select" @bind="secondaryCategory"> @* aria-label="Default select example" *@
                        <option selected value="">Meal type</option>
                        <option value="B">B</option>
                        <option value="L">L</option>
                        <option value="D">D</option>
                        <option value="S">S</option>
                        <option value="K">K</option>
                    </select>
                }
                else if (baseCategory == "name")
                {
                    @*<input type="text" class="form-control" placeholder="Order by name..." aria-label="Search by name"
                           
                    

                    



                    @bind="secondaryCategory" @onfocus="OnSecondarySearchBarFocus"
                           
                    

                    



                    @onblur="OnSecondarySearchBarBlur">*@
                }
                else if (baseCategory == "macros")
                {
                    <select class="form-select" @bind="secondaryCategory"> @* aria-label="Default select example" *@
                        <option selected value="">Macro type</option>
                        <option value="calories">Calories</option>
                        <option value="fats">Fat</option>
                        <option value="carbs">Carbs</option>
                        <option value="protein">Protein</option>
                    </select>
                }
            }
        </div>
        @* Direction *@
        <div class="col">
            @if (secondaryCategory != "")
            {
                <select class="form-select" @bind="orderDirection"> @* aria-label="Default select example" *@
                    <option selected value="">Order direction</option>
                    <option value="asc">Asc</option>
                    <option value="desc">Desc</option>
                </select>
            }
        </div>
        <div class="col">
            @if (orderDirection != "" && baseCategory == "macros")
            {
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Min" aria-label="minimum" @bind="minNum">
                    <span class="input-group-text">=&lt X =&lt</span>
                    <input type="text" class="form-control" placeholder="Max" aria-label="maximum" @bind="maxNum">
                </div>
            }
        </div>
        <div class="col">
            @if (orderDirection != "")
            {
                <button class="btn btn-primary" @onclick="HandleGettingRecipes">Search</button>
            }
        </div>
    </div>
</div>


@if (sortedRecipes != null)
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @if (sortedRecipes.Count != 0)
        {
            @foreach (var recipe in sortedRecipes)
            {
                <div class="col" style="padding: 10px">
                    <div class="card h-100 border-layout">
                        <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..." class="card-img"/>
                        <div class="card-header">
                            <h4>@recipe.RecipeId. @recipe.Name</h4>
                        </div>
                        <div class="card-body border-primary">
                            <p class="card-text">
                                - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                                - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                                - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                                - Protein: @recipe.TotalMacros.Protein.ToString("0")
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}

<StatusMessageToast @ref="statusMessageToaster"/>

@code{
    int? minNum;
    int? maxNum;
    bool isBaseSearchBarActive = false;
    string baseCategory = "";
    string secondaryCategory = "";
    string orderDirection = "";
    List<Recipe>? sortedRecipes;
    StatusMessageToast statusMessageToaster = null!;

    private void HandleBaseCategory(string category)
    {
        secondaryCategory = "";
        orderDirection = "";
        baseCategory = category;
        StateHasChanged();
    }

    private void OnBaseSearchBarFocus()
    {
        Console.WriteLine("Search bar is active...");
        isBaseSearchBarActive = true;
        StateHasChanged();
    }

    private async Task OnBaseSearchBarBlur()
    {
        await Task.Delay(200);
        isBaseSearchBarActive = false;
        StateHasChanged();
    }

    private async Task HandleGettingRecipes()
    {
        try
        {
            var result = await DbService.GetRecipesByCategory(baseCategory, secondaryCategory, orderDirection, minNum, maxNum);
            if (result.Recipes == null)
                await statusMessageToaster.ShowToastAsync(result.Message);
            else
                sortedRecipes = result.Recipes;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error handling getting recipes: " + ex.Message);
            Console.WriteLine("Error handling getting recipes: " + ex.StackTrace);
            return;
        }
    }

}