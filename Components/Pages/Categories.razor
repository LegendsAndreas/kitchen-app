@page "/categories"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents;
@inject DBService DbService;

<PageTitle>Categories</PageTitle>

@*<div class="dropdown center-element">
    <a class="btn btn-primary custom-layout dropdown-toggle btn-lg" href="#" role="button" data-bs-toggle="dropdown"
       aria-expanded="false">
        Search by...
    </a>

    <ul class="dropdown-menu">
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("name", ""))">Name</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("meal_type", ""))">Meal
                type
            </button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("calories", ""))">Calories
            </button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("carbs", ""))">Carbs
            </button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("fats", ""))">Fat</button>
        </li>
        <li>
            <button class="dropdown-item" type="submit" onclick="@(() => HandleSearchOption("protein", ""))">Protein
            </button>
        </li>
    </ul>
</div>*@

<div class="container" style="background-color: #2b3035; padding: 10px; border-radius: 5px;">

    <div class="row row-cols-5">
        <div class="col">
            <input type="text" class="form-control" placeholder="Order by..." aria-label="Search by name"
                   @bind="baseCategory" @onfocus="OnBaseSearchBarFocus" @onblur="OnBaseSearchBarBlur">
            @if (isBaseSearchBarActive)
            {
                <div class="dropdown">
                    <ul class="dropdown-menu show"> @* "show" is vital, since it automatically shows the items. *@
                        <li>
                            <a class="dropdown-item"
                               onclick="@(() => HandleBaseCategory("Meal Type"))">Meal Type</a>
                        </li>
                        <li>
                            <a class="dropdown-item"
                               onclick="@(() => HandleBaseCategory("Name"))">Name</a>
                        </li>
                        <li>
                            <a class="dropdown-item"
                               onclick="@(() => HandleBaseCategory("Macros"))">Macros</a>
                        </li>
                    </ul>
                </div>
            }
        </div>
        <div class="col">
            @if (baseCategory != "")
            {
                if (baseCategory == "Meal Type")
                {
                    <input type="text" class="form-control" placeholder="Order by meal type..."
                           aria-label="Search by name"
                           @bind="secondaryCategory" @onfocus="OnSecondarySearchBarFocus"
                           @onblur="OnSecondarySearchBarBlur">
                    @if (isSecondarySearchBarActive)
                    {
                        <div class="dropdown">
                            <ul class="dropdown-menu show"> @* "show" is vital, since it automatically shows the items. *@
                                <li>
                                    <a class="dropdown-item"
                                       onclick="@(() => HandleSecondaryCategory("B"))">B</a>
                                </li>
                                <li>
                                    <a class="dropdown-item"
                                       onclick="@(() => HandleSecondaryCategory("L"))">L</a>
                                </li>
                                <li>
                                    <a class="dropdown-item"
                                       onclick="@(() => HandleSecondaryCategory("D"))">D</a>
                                </li>
                                <li>
                                    <a class="dropdown-item"
                                       onclick="@(() => HandleSecondaryCategory("S"))">S</a>
                                </li>
                                <li>
                                    <a class="dropdown-item"
                                       onclick="@(() => HandleSecondaryCategory("K"))">K</a>
                                </li>
                            </ul>
                        </div>
                    }
                }
                else if (baseCategory == "Name")
                {
                    <input type="text" class="form-control" placeholder="Order by name..." aria-label="Search by name"
                           @bind="secondaryCategory" @onfocus="OnSecondarySearchBarFocus"
                           @onblur="OnSecondarySearchBarBlur">
                }
                else if (baseCategory == "Macros")
                {
                    <select class="form-select" @bind="secondaryCategory"> @* aria-label="Default select example" *@
                        <option selected value="">Macro type</option>
                        <option value="calories">Calories</option>
                        <option value="fat">Fat</option>
                        <option value="carbs">Carbs</option>
                        <option value="protein">Protein</option>
                    </select>
                }
            }
        </div>
        <div class="col">
            @if (secondaryCategory != "")
            {
                <select class="form-select" @bind="orderDirection"> @* aria-label="Default select example" *@
                    <option selected value="">Order direction</option>
                    <option value="ASC">Asc</option>
                    <option value="DESC">Desc</option>
                </select>
            }
            @if (orderDirection != "")
            {
                <p>@orderDirection</p>
            }
        </div>
        <div class="col">
            @if (orderDirection != "")
            {
                <p>x =&lt 7000</p>
            }
        </div>
    </div>
</div>


@if (sortedRecipes != null)
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @if (sortedRecipes.Count != 0)
        {
            @foreach (var recipe in sortedRecipes)
            {
                <div class="col" style="padding: 10px">
                    <div class="card h-100 border-layout">
                        <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..." class="card-img"/>
                        <div class="card-header">
                            <h4>@recipe.RecipeId. @recipe.Name</h4>
                        </div>
                        <div class="card-body border-primary">
                            <p class="card-text">
                                - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                                - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                                - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                                - Protein: @recipe.TotalMacros.Protein.ToString("0")
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}

<StatusMessageToast @ref="statusMessageToaster"/>

@code{
    bool isBaseSearchBarActive = false;
    bool isSecondarySearchBarActive = false;
    string baseCategory = "";
    string secondaryCategory = "";
    string orderDirection = "";
    List<Recipe>? sortedRecipes;
    StatusMessageToast? statusMessageToaster;

    private void HandleBaseCategory(string category)
    {
        secondaryCategory = "";
        baseCategory = category;
        StateHasChanged();
    }

    private void HandleSecondaryCategory(string category)
    {
        secondaryCategory = category;
        StateHasChanged();
    }

    private void OnBaseSearchBarFocus()
    {
        Console.WriteLine("Search bar is active...");
        isBaseSearchBarActive = true;
        StateHasChanged();
    }

    private async Task OnBaseSearchBarBlur()
    {
        await Task.Delay(200);
        isBaseSearchBarActive = false;
        StateHasChanged();
    }

    private void OnSecondarySearchBarFocus()
    {
        Console.WriteLine("Search bar is active...");
        isSecondarySearchBarActive = true;
        StateHasChanged();
    }

    private async Task OnSecondarySearchBarBlur()
    {
        await Task.Delay(200);
        isSecondarySearchBarActive = false;
        StateHasChanged();
    }

}