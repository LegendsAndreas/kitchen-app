@page "/create-recipe"
@rendermode InteractiveServer
@inject DBService DbService;
@inject Recipe CurrentRecipe;
@inject Ingredient CurrentIngredient;
@inject List<Ingredient> DbIngredients;
@inject IJSRuntime JsRuntime;
<PageTitle>Create Recipe</PageTitle>

<h1 class="toast-header header-padding font-layout border-layout" id="create-recipe-header">
    Create a new recipe!
</h1>

<div class="card center-content border-layout">
    <div class="card-body">
        <EditForm Model="@CurrentRecipe" OnValidSubmit="OnValidRecipe">
            <DataAnnotationsValidator/>

            <div class="container text-center border-layout paddage">
                <div class="row row-cols-1 row-cols-sd-2 row-cols-md-3 row-cols-lg-3 g-3">
                    <div class="col">
                        <label class="form-label">Meal Type:</label>
                        <InputText id="meal-type" @bind-Value="CurrentRecipe.MealType"/>
                    </div>

                    <div class="col">
                        <label>Recipe Name:</label>
                        <InputText id="name" @bind-Value="CurrentRecipe.Name"/>
                    </div>

                    <div class="col">
                        <label>Image:</label>
                        <InputText id="image" @bind-Value="CurrentRecipe.Base64Image"/>
                    </div>
                    <button type="submit" class="btn btn-primary col">Create Recipe</button>
                </div>
            </div>

        </EditForm>

        <EditForm Model="@CurrentIngredient" OnValidSubmit="OnValidIngredient">
            <DataAnnotationsValidator/>

            <div class="container text-center border-layout paddage">
                <div class="row row-cols-1 row-cols-sd-2 row-cols-md-3 row-cols-lg-3 g-3">
                    <div class="col">
                        <label>Ingredient Name:</label>
                        <InputText id="ingredient-name" @bind-Value="CurrentIngredient.Name"/>
                    </div>

                    <div class="col">
                        <label>Grams:</label>
                        <InputNumber id="kg" @bind-Value="CurrentIngredient.Grams"/>
                    </div>

                    <div class="col">
                        <label>Calories (pr. 100g):</label>
                        <InputNumber id="calories" @bind-Value="CurrentIngredient.CaloriesPer100g"/>
                    </div>

                    <div class="col">
                        <label>Carbs (pr. 100g):</label>
                        <InputNumber id="carbs" @bind-Value="CurrentIngredient.CarbsPer100g"/>
                    </div>

                    <div class="col">
                        <label>Fats (pr. 100g):</label>
                        <InputNumber id="fats" @bind-Value="CurrentIngredient.FatsPer100g"/>
                    </div>

                    <div class="col">
                        <label>Protein (pr. 100g):</label>
                        <InputNumber id="protein" @bind-Value="CurrentIngredient.ProteinPer100g"/>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Ingredient</button>
                </div>
            </div>
        </EditForm>


        <EditForm Model="@currentDbIngredient" OnValidSubmit="OnValidDbIngredient">
            <DataAnnotationsValidator/>
            <div class="container text-center border-layout paddage">
                <div class="row row-cols-1 row-cols-sd-2 row-cols-md-2 row-cols-lg-2 g-3">

                    <div class="col">
                        <label>Name</label>
                        <InputText id="namer" @bind-Value="currentDbIngredient.Name"/>
                    </div>


                    <div class="col">
                        <label>Grams</label>
                        <InputNumber id="gramser" @bind-Value="currentDbIngredient.Grams"/>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Existing Database Ingredient</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@* The current ingredients *@
<div class="accordion border-layout" id="accordionExample" style="margin-top: 10px;">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapseOne"
                    aria-expanded="true" aria-controls="collapseOne">
                Added Ingredients
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                @if (currentIngredients.Count == 0)
                {
                    <p>No ingredients added</p>
                }
                @foreach (var ingredient in currentIngredients)
                {
                    <div class="mb-3" style="display:inline-block; margin-right: 10px; padding: 10px;">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown"
                                aria-expanded="false">
                            @ingredient.Name
                        </button>
                        <ul class="dropdown-menu">
                            <li class="dropdown-item">Calories: @ingredient.CaloriesPer100g.ToString("0")</li>
                            <li class="dropdown-item">Grams: @ingredient.Grams.ToString("0")</li>
                            <li class="dropdown-item">Protein: @ingredient.ProteinPer100g.ToString("0")</li>
                            <li class="dropdown-item">Fat: @ingredient.FatsPer100g.ToString("0")</li>
                            <li class="dropdown-item">Carbs: @ingredient.CarbsPer100g.ToString("0")</li>
                        </ul>
                        <button type="submit" class="btn btn-danger"
                                @onclick="() => DeleteRecipe(currentIngredients.IndexOf(ingredient))">
                            <strong>X</strong>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* toaster *@
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast header-padding" role="alert" aria-live="assertive" aria-atomic="true"
         data-bs-delay="5000">
        <div class="toast-body">
            Existing ingredient not found in database.
        </div>
    </div>
</div>

<script>
    function showInvalidIngredientToast() {
        const toastLiveExample = document.getElementById('liveToast');
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
        toastBootstrap.show();
    }
</script>

@code {
    readonly List<Ingredient> currentIngredients = new();
    readonly Ingredient currentDbIngredient = new();

    protected override async Task OnInitializedAsync()
    {
        /*try
        {
            DbIngredients = await DbService.GetIngredientsFromTableAsync();
            Console.WriteLine("Acquired ingredients.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting ingredients list: " + ex.Message);
            throw;
        }*/
    }

    private async Task OnValidRecipe()
    {
        if (currentIngredients.Count == 0)
        {
            Console.WriteLine("There are no ingredients.");
            return;
        }

        CurrentRecipe.Ingredients = currentIngredients;
        CurrentRecipe.SetTotalMacros();

        Console.WriteLine("Print current recipe");
        CurrentRecipe.PrintRecipe();

        try
        {
            await DbService.AddRecipeToDb(CurrentRecipe);
        }
        catch (Exception e)
        {
            Console.WriteLine("Error sending recipe to database: " + e.Message);
            throw;
        }

        CurrentRecipe.ClearRecipe();
        CurrentIngredient.ClearIngredient();
        currentIngredients.Clear();
    }

    public void OnValidIngredient()
    {
        Ingredient tempIngredient = CurrentIngredient.TransferIngredient(CurrentIngredient);
        tempIngredient.PrintIngredient();

        currentIngredients.Add(tempIngredient);
        CurrentIngredient.ClearIngredient();
    }

    public async Task OnValidDbIngredient()
    {
        foreach (var ingredient in DbIngredients)
        {
            if (currentDbIngredient.Name == ingredient.Name)
            {
                CurrentIngredient.Name = currentDbIngredient.Name;
                CurrentIngredient.Grams = currentDbIngredient.Grams;
                CurrentIngredient.CaloriesPer100g = ingredient.CaloriesPer100g;
                CurrentIngredient.FatsPer100g = ingredient.FatsPer100g;
                CurrentIngredient.CarbsPer100g = ingredient.CarbsPer100g;
                CurrentIngredient.ProteinPer100g = ingredient.ProteinPer100g;

                OnValidIngredient();

                currentDbIngredient.ClearIngredient();

                return;
            }
        }

        Console.WriteLine("Not a valid ingredient");
        await JsRuntime.InvokeVoidAsync("showInvalidIngredientToast");
    }


    private void DeleteRecipe(int index)
    {
        currentIngredients.RemoveAt(index);
        StateHasChanged();
    }

}