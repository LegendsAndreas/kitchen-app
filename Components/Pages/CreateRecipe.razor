@page "/create-recipe"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents
@using Microsoft.AspNetCore.Http
@inject DBService DbService;
@inject SharedRecipe SharedDbRecipe;
@inject SharedRecipeList GlobalRecipes;
@inject SharedIngredientList GlobalIngredients;
@inject IHttpContextAccessor HttpContextAccessor


<PageTitle>Create Recipe</PageTitle>

<h1 class="toast-header p-2 generel__font-layout generel__border-layout d-inline-block">
    Create a new recipe!
</h1>

<div class="card center-content generel__border-layout">
    <div class="card-body">
        <EditForm Model="@_currentRecipe" OnValidSubmit="CreateNewRecipe">
            <DataAnnotationsValidator/>
            <div class="container text-center generel__border-layout m-2 p-4">
                <div class="row row-cols-1 row-cols-sd-2 row-cols-md-3 row-cols-lg-3 g-3">
                    <div class="col">
                        <label class="form-label">Meal Type:</label>
                        <InputText id="meal-type" @bind-Value="_currentRecipe.MealType"/>
                    </div>

                    <div class="col">
                        <label>Recipe Name:</label>
                        <InputText id="name" @bind-Value="_currentRecipe.Name"/>
                    </div>

                    <label class="generel__file-label"
                           for="fileInput">@(string.IsNullOrEmpty(_currentRecipe.Base64Image) ? "Choose Image" : "Image Selected")</label>
                    <InputFile id="fileInput" OnChange="ChooseImage" class="d-none"></InputFile>

                    <button type="submit" class="btn btn-primary col">Create Recipe</button>
                </div>
            </div>
        </EditForm>

        <EditForm Model="@_currentIngredient" OnValidSubmit="AddIngredient">
            <DataAnnotationsValidator/>
            <div class="container text-center generel__border-layout m-2 p-4">
                <div class="row row-cols-1 row-cols-sd-2 row-cols-md-3 row-cols-lg-3 g-3">
                    <div class="col">
                        <label>Ingredient Name:</label>
                        <InputText id="ingredient-name" @bind-Value="_currentIngredient.Name"/>
                    </div>

                    <div class="col">
                        <label>Grams:</label>
                        <InputNumber id="kg" @bind-Value="_currentIngredient.Grams"/>
                    </div>

                    <div class="col">
                        <label>Calories (pr. 100g):</label>
                        <InputNumber id="calories" @bind-Value="_currentIngredient.CaloriesPer100g"/>
                    </div>

                    <div class="col">
                        <label>Carbs (pr. 100g):</label>
                        <InputNumber id="carbs" @bind-Value="_currentIngredient.CarbsPer100g"/>
                    </div>

                    <div class="col">
                        <label>Fats (pr. 100g):</label>
                        <InputNumber id="fats" @bind-Value="_currentIngredient.FatPer100g"/>
                    </div>

                    <div class="col">
                        <label>Protein (pr. 100g):</label>
                        <InputNumber id="protein" @bind-Value="_currentIngredient.ProteinPer100g"/>
                    </div>

                    <button type="submit" class="btn btn-primary">Add Ingredient</button>
                </div>
            </div>
        </EditForm>

        @if (GlobalRecipes.Recipes.Count == 0)
        {
            <Loading LoadingParameter="recipes"/>
        }
        else
        {
            <EditForm Model="@_currentIngredientRecipe">
                <div class="container text-center generel__border-layout m-2 p-4">
                    <div class="row row-cols-1 row-cols-sd-3 row-cols-md-3 row-cols-lg-3 g-3">
                        <RealTimeRecipeSearchBar RecipesData="@GlobalRecipes.Recipes"/>

                        <div class="col">
                            <label class="form-label">Parts: 1/</label>
                            <InputNumber @bind-Value="_currentIngredientRecipeParts"/>
                        </div>

                        <div class="col">
                            <p>Current Recipe: @SharedDbRecipe.SelectedRecipe.Name</p>
                        </div>

                        <button type="submit" class="btn btn-primary" @onclick="AddRecipeAsIngredient">Add Recipe As
                            Ingredient
                        </button>
                    </div>
                </div>
            </EditForm>
        }

        @if (GlobalIngredients.Ingredients.Count == 0)
        {
            <Loading LoadingParameter="ingredients"/>
        }
        else
        {
            <EditForm Model="@_currentIngredientGrams" OnSubmit="AddDatabaseIngredient">
                <DataAnnotationsValidator/>
                <div class="container text-center generel__border-layout m-2 p-4">
                    <div class="row row-cols-1 row-cols-sd-3 row-cols-md-3 row-cols-lg-3 g-3">

                        <RealTimeIngredientSearchBar IngredientsData="@GlobalIngredients.Ingredients"
                                                     CurrentIngredientDataHasChanged="@(value => _crossIngredient = value)"/>

                        <div class="col">
                            <label class="form-label">Grams</label>
                            <InputNumber @bind-Value="_currentIngredientGrams"/>
                        </div>

                        <div class="col">
                            <p>Current Ingredient: @_crossIngredient.Name</p>
                        </div>

                        <button type="submit" class="btn btn-primary">Add Database Ingredient</button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

<div class="mb-3">
    <AddedIngredients CurrentAddedIngredients="@_currentIngredients"/>
</div>
<StatusMessageToast @ref="_statusMessageToaster"/>

@code {
    int _currentIngredientGrams;
    int _currentIngredientRecipeParts;
    Recipe _currentRecipe = new();
    Recipe _currentIngredientRecipe = new();
    Ingredient _currentIngredient = new();
    Ingredient _crossIngredient = new();
    StatusMessageToast _statusMessageToaster = null!;
    readonly List<Ingredient> _currentIngredients = new();

    private void OnRecipeNameChanged(string newValue)
    {
        // Set a cookie with the updated recipe name
        var cookies = HttpContextAccessor.HttpContext?.Response.Cookies;

        if (cookies != null)
        {
            // Add a cookie called "RecipeName", which stores the recipe name
            cookies.Append("RecipeName", newValue, new CookieOptions
            {
                Expires = DateTimeOffset.Now.AddDays(7) // Cookie expiration can be adjusted
            });

            Console.WriteLine($"Cookie updated: RecipeName={newValue}");
        }
        else
        {
            Console.WriteLine("HttpContext is unavailable. Cannot set cookies.");
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !GlobalRecipes.Recipes.Any())
        {
            try
            {
                var result = await DbService.GetAllRecipesAsync();
                if (result.Recipes == null)
                {
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                }
                else
                {
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                    GlobalRecipes.Recipes = result.Recipes;
                    Console.WriteLine("Acquired Recipes.");
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting recipes: " + ex.Message);
                Console.WriteLine("StackTrace: " + ex.StackTrace);

                if (ex.Message.Contains("Failed to connect"))
                    await _statusMessageToaster.ShowToastAsync("Failed to connect to database, please reload the page.");
                else
                    await _statusMessageToaster.ShowToastAsync("Connection failure: " + ex.Message);

                return;
            }
        }

        if (firstRender && !GlobalIngredients.Ingredients.Any())
        {
            try
            {
                var result = await DbService.GetAllDbIngredients();
                if (result.DbIngredients == null)
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                else
                {
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                    Console.WriteLine(result.Message);
                    GlobalIngredients.Ingredients = result.DbIngredients;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting ingredients list: " + ex.Message);
                Console.WriteLine("StackTrace: " + ex.StackTrace);
                return;
            }
        }

        if (!firstRender)
            Console.WriteLine("Not first render.");

        if (GlobalIngredients.Ingredients.Any())
            Console.WriteLine("Ingredients are full.");
    }

    private async Task CreateNewRecipe()
    {
        Console.WriteLine("Handling recipe...");
        if (_currentIngredients.Count == 0)
        {
            Console.WriteLine("There are no ingredients.");
            await _statusMessageToaster.ShowToastAsync("Recipe was not created; no ingredients added");
            return;
        }

        if (_currentRecipe.MealType is not ("B" or "L" or "D" or "S" or "K"))
        {
            Console.WriteLine($"Invalid meal type \"{_currentRecipe.MealType}\"");
            await _statusMessageToaster.ShowToastAsync($"Recipe was not created; invalid meal type \"{_currentRecipe.MealType}\"");
            return;
        }

        _currentRecipe.Ingredients = _currentIngredients;
        _currentRecipe.SetTotalMacros();
        _currentRecipe.SetTotalCost();

        _currentRecipe.PrintRecipe("HandleRecipe");

        try
        {
            var result = await DbService.AddRecipeToDb(_currentRecipe);
            if (!result.Status)
                await _statusMessageToaster.ShowToastAsync("Error adding recipe to database; " + result.Message);
            else
                await _statusMessageToaster.ShowToastAsync(result.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error handling recipe: " + ex.Message);
            Console.WriteLine("StackTrace: " + ex.StackTrace);
            return;
        }

        _currentRecipe.ClearRecipe();
        _currentIngredient.ClearIngredient();
        _currentIngredients.Clear();
    }

    private async Task ChooseImage(InputFileChangeEventArgs imageFile)
    {
        foreach (var image in imageFile.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return;
            }

            try
            {
                await _currentRecipe.SetRecipeImage(image);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error setting image: " + ex.Message);
                Console.WriteLine(ex.StackTrace);
                return;
            }
        }
    }

    public void AddIngredient()
    {
        Console.WriteLine("Handling ingredient...");
        var tempIngredient = _currentIngredient.TransferIngredient(_currentIngredient);
        tempIngredient.PrintIngredient("HandleIngredient");

        _currentIngredients.Add(tempIngredient);
        _currentIngredient.ClearIngredient();
    }

    private async Task AddRecipeAsIngredient()
    {
        _currentIngredientRecipe = SharedDbRecipe.SelectedRecipe;

        if (string.IsNullOrEmpty(_currentIngredientRecipe.Name))
        {
            Console.WriteLine("Current ingredient recipe is not selected");
            await _statusMessageToaster.ShowToastAsync("Ingredient recipe is not selected");
            return;
        }

        if (_currentIngredientRecipeParts < 1)
        {
            Console.WriteLine("Parts are below 1");
            await _statusMessageToaster.ShowToastAsync("Parts cant be less than 1");
            return;
        }

        // Just leave this one alone lil bro
        _currentIngredient.Name = _currentIngredientRecipe.Name;
        // ReSharper disable once PossibleLossOfFraction
        _currentIngredient.Grams = 100 / _currentIngredientRecipeParts;
        _currentIngredient.CaloriesPer100g = _currentIngredientRecipe.TotalMacros.Calories;
        _currentIngredient.FatPer100g = _currentIngredientRecipe.TotalMacros.Fat;
        _currentIngredient.CarbsPer100g = _currentIngredientRecipe.TotalMacros.Carbs;
        _currentIngredient.ProteinPer100g = _currentIngredientRecipe.TotalMacros.Protein;

        AddIngredient();
    }

    public async Task AddDatabaseIngredient()
    {
        if (string.IsNullOrEmpty(_crossIngredient.Name))
        {
            Console.WriteLine("No db ingredient selected");
            await _statusMessageToaster.ShowToastAsync("No database ingredient selected");
            return;
        }

        if (_currentIngredientGrams == 0)
        {
            Console.WriteLine("No grams specified.");
            await _statusMessageToaster.ShowToastAsync("No grams selected.");
            return;
        }

        _currentIngredient = _crossIngredient.TransferIngredient(_crossIngredient);
        _currentIngredient.Grams = _currentIngredientGrams;
        AddIngredient();
    }

}