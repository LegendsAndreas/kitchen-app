@page "/create-recipe"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using WebKitchen.Components.Pages.RealTimeSearchBarElement
@using WebKitchen.Components.SharedComponents;
@inject User CurrentUser;
@inject DBService DbService;
@inject SharedIngredient SharedDbIngredient
@inject SharedIngredientList GlobalIngredients;

<PageTitle>Create Recipe</PageTitle>

<h1 class="toast-header header-padding font-layout border-layout" id="create-recipe-header">
    Create a new recipe!
</h1>

@* !!!PROBLEM!!!
Since we are using child components (PreviewRecipe and RealTimeIngredientSearchBar), when we StateHasChanged()
in the child components, the parent component (CreateRecipe) does not get the memo. Therefore, we have to find a way to tell the parent
StateHasChanged(). Right now, we just have this button as a temporary solution. *@
<button type="button" class="btn btn-primary" @onclick="UpdatePage">Update Page Real Quick</button>

@if (CurrentUser.GetUserId() != 0)
{
    <div class="card center-content border-layout">
        <div class="card-body">
            <EditForm Model="@currentRecipe" OnValidSubmit="HandleRecipe">
                <DataAnnotationsValidator/>

                <div class="container text-center border-layout paddage">
                    <div class="row row-cols-1 row-cols-sd-2 row-cols-md-3 row-cols-lg-3 g-3">
                        <div class="col">
                            <label class="form-label">Meal Type:</label>
                            <InputText id="meal-type" @bind-Value="currentRecipe.MealType"/>
                        </div>

                        <div class="col">
                            <label>Recipe Name:</label>
                            <InputText id="name" @bind-Value="currentRecipe.Name"/>
                        </div>

                        <label class="file-label" for="fileInput">Choose Image</label>
                        <InputFile id="fileInput" OnChange="HandleImage" class="hidden-file-input"></InputFile>
                        <button type="submit" class="btn btn-primary col">Create Recipe</button>
                    </div>
                </div>
            </EditForm>

            <EditForm Model="@currentIngredient" OnValidSubmit="HandleIngredient">
                <DataAnnotationsValidator/>
                <div class="container text-center border-layout paddage">
                    <div class="row row-cols-1 row-cols-sd-2 row-cols-md-3 row-cols-lg-3 g-3">
                        <div class="col">
                            <label>Ingredient Name:</label>
                            <InputText id="ingredient-name" @bind-Value="currentIngredient.Name"/>
                        </div>

                        <div class="col">
                            <label>Grams:</label>
                            <InputNumber id="kg" @bind-Value="currentIngredient.Grams"/>
                        </div>

                        <div class="col">
                            <label>Calories (pr. 100g):</label>
                            <InputNumber id="calories" @bind-Value="currentIngredient.CaloriesPer100g"/>
                        </div>

                        <div class="col">
                            <label>Carbs (pr. 100g):</label>
                            <InputNumber id="carbs" @bind-Value="currentIngredient.CarbsPer100g"/>
                        </div>

                        <div class="col">
                            <label>Fats (pr. 100g):</label>
                            <InputNumber id="fats" @bind-Value="currentIngredient.FatsPer100g"/>
                        </div>

                        <div class="col">
                            <label>Protein (pr. 100g):</label>
                            <InputNumber id="protein" @bind-Value="currentIngredient.ProteinPer100g"/>
                        </div>
                        <button type="submit" class="btn btn-primary">Add Ingredient</button>
                    </div>
                </div>
            </EditForm>

            <EditForm Model="@currentIngredientGrams" OnSubmit="HandleDbIngredient">
                <DataAnnotationsValidator/>
                <div class="container text-center border-layout paddage">
                    <div class="row row-cols-1 row-cols-sd-3 row-cols-md-3 row-cols-lg-3 g-3">

                        <RealTimeIngredientSearchBar IngredientsData="@GlobalIngredients.Ingredients"/>

                        <div class="col">
                            <label class="form-label">Grams</label>
                            <InputNumber id="gramser" @bind-Value="currentIngredientGrams"/>
                        </div>

                        <div class="col">
                            <p>Current Ingredient: @SharedDbIngredient.SelectedIngredient.Name</p>
                        </div>

                        <button type="submit" class="btn btn-primary">Add Existing Database Ingredient</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

    @* The current ingredients *@
    <div class="accordion border-layout" id="accordionExample" style="margin-top: 10px;">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                        data-bs-target="#collapseOne"
                        aria-expanded="true" aria-controls="collapseOne">
                    Added Ingredients
                </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    @if (currentIngredients.Count == 0)
                    {
                        <p>No ingredients added</p>
                    }
                    @foreach (var ingredient in currentIngredients)
                    {
                        <div class="mb-3" style="display:inline-block; margin-right: 10px; padding: 10px;">
                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                @ingredient.Name
                            </button>
                            <ul class="dropdown-menu">
                                <li class="dropdown-item">Calories: @ingredient.CaloriesPer100g.ToString("0")</li>
                                <li class="dropdown-item">Grams: @ingredient.Grams.ToString("0")</li>
                                <li class="dropdown-item">Protein: @ingredient.ProteinPer100g.ToString("0")</li>
                                <li class="dropdown-item">Fat: @ingredient.FatsPer100g.ToString("0")</li>
                                <li class="dropdown-item">Carbs: @ingredient.CarbsPer100g.ToString("0")</li>
                            </ul>
                            <button type="submit" class="btn btn-danger"
                                    @onclick="() => DeleteIngredient(currentIngredients.IndexOf(ingredient))">
                                <strong>X</strong>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>Log in to create recipe.</p>
}

<StatusMessageToast @ref="statusMessageToaster"/>

@code {
    Ingredient currentIngredient = new();
    Recipe currentRecipe = new();
    int currentIngredientGrams;
    readonly List<Ingredient> currentIngredients = new();
    [Required]StatusMessageToast statusMessageToaster;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Console.WriteLine("Rendering Create Recipe...");
        // Console.WriteLine("Ingredients: " + SharedIngredients.Ingredients.Count);

        if (firstRender && !GlobalIngredients.Ingredients.Any())
        {
            try
            {
                var tempIngredients = await DbService.GetAllDbIngredients();
                GlobalIngredients.Ingredients = tempIngredients;
                Console.WriteLine("Acquired ingredients.");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting ingredients list: " + ex.Message);
                throw;
            }
        }

        /*if (!firstRender)
            Console.WriteLine("Not first render.");

        if (SharedIngredients.Ingredients.Any())
            Console.WriteLine("Ingredients are full.");*/
    }

    private async Task HandleRecipe()
    {
        Console.WriteLine("Handling recipe...");
        if (currentIngredients.Count == 0)
        {
            Console.WriteLine("There are no ingredients.");
            return;
        }

        currentRecipe.Ingredients = currentIngredients;
        currentRecipe.SetTotalMacros();

        Console.WriteLine("Print current recipe");
        currentRecipe.PrintRecipe();

        try
        {
            var result = await DbService.AddRecipeToDb(currentRecipe,CurrentUser.GetUserId());
            if (!result.Status)
            {
                await statusMessageToaster.ShowToastAsync("Failed adding recipe to database; "+result.Message);
            }
            else
            {
                await statusMessageToaster.ShowToastAsync(result.Message);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error sending recipe to database: " + e.Message);
            Console.WriteLine("StackTrace: " + e.StackTrace);
            await statusMessageToaster.ShowToastAsync("Error adding recipe to database; "+e.Message);
            return;
        }

        currentRecipe.ClearRecipe();
        currentIngredient.ClearIngredient();
        currentIngredients.Clear();
    }

    private async Task HandleImage(InputFileChangeEventArgs imageFile)
    {
        foreach (var image in imageFile.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return;
            }

            try
            {
                await currentRecipe.SetRecipeImage(image);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error setting image: " + ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }
    }

    public void HandleIngredient()
    {
        Console.WriteLine("Handling ingredient...");
        var tempIngredient = currentIngredient.TransferIngredient(currentIngredient);
        tempIngredient.PrintIngredient();

        currentIngredients.Add(tempIngredient);
        currentIngredient.ClearIngredient();
    }

    public void HandleDbIngredient()
    {
        Console.WriteLine("Handling db ingredient...");
        if (currentIngredientGrams == 0)
        {
            Console.WriteLine("No grams specified.");
            return;
        }

        currentIngredient.Name = SharedDbIngredient.SelectedIngredient.Name;
        currentIngredient.Grams = currentIngredientGrams;
        currentIngredient.CaloriesPer100g = SharedDbIngredient.SelectedIngredient.CaloriesPer100g;
        currentIngredient.FatsPer100g = SharedDbIngredient.SelectedIngredient.FatsPer100g;
        currentIngredient.CarbsPer100g = SharedDbIngredient.SelectedIngredient.CarbsPer100g;
        currentIngredient.ProteinPer100g = SharedDbIngredient.SelectedIngredient.ProteinPer100g;

        HandleIngredient();
    }


    private void DeleteIngredient(int index)
    {
        currentIngredients.RemoveAt(index);
        StateHasChanged();
    }

    public void UpdatePage()
    {
        StateHasChanged();
    }

}