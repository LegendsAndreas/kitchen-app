@page "/developer"
@rendermode InteractiveServer
@using WebKitchen.Components.Pages.RealTimeSearchBarElement;
@inject DBService DbService
@inject List<Recipe> recipes
@* @inject SharedTestService SharedTest; *@

<div>
    <RealTimeRecipeSearchBar RecipesData="@recipes"/>
</div>

<div class="container">
    <!-- Search Bar -->
    <div class="row mb-3">
        <div class="col">
            <input type="text" class="form-control" placeholder="Search recipes..." @bind="searchQuery"
                   @oninput="OnInputChange"
                   @onfocus="OnSearchBarFocus" @onblur="OnSearchBarBlur"/>
        </div>
        @if (isSearchBarActive && searchQuery != string.Empty)
        {
            <div class="dropdown">
                <ul class="dropdown-menu show"> @* "show" is vital, since it automatically shows the items. *@
                    @if (filteredRecipes.Count != 0)
                    {
                        @foreach (var recipe in filteredRecipes)
                        {
                            <li>
                                <button class="dropdown-item" type="button" @onclick="PrintItem">@recipe.Name</button>
                            </li>
                        }
                    }
                    else
                    {
                        <li>
                            <button class="dropdown-item" type="button">No results found</button>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>

    <!-- Filtered Results Below -->
    <div class="row row-cols-4 g-1">
        @if (recipes.Count != 0)
        {
            @foreach (var recipe in filteredRecipes)
            {
                <div class="col" style="padding: 10px">
                    <div class="card h-100 border-layout">
                        <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..." class="card-img"
                             id="home-recipe-image"/>
                        <div class="card-header">
                            <h4>@recipe.Name</h4>
                        </div>
                        <div class="card-body border-primary">
                            <p class="card-text">
                                - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                                - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                                - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                                - Protein: @recipe.TotalMacros.Protein.ToString("0")
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
        else if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            <div class="col">
                <p>No recipes found matching "<b>@searchQuery</b>"</p>
            </div>
        }
    </div>
</div>

@code{
    private string searchQuery = string.Empty; // Search query bound to the input
    private bool isSearchBarActive = false;

    private List<Recipe> filteredRecipes => recipes
        .Where(r => string.IsNullOrEmpty(searchQuery) || r.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        .ToList();

    protected override void OnInitialized()
    {
        /*Console.WriteLine("Test string at Developer: " + SharedTest.TestString);
        Console.WriteLine("Test int at Developer: " + SharedTest.TestInt);
        SharedTest.TestString = "Developer";
        SharedTest.TestInt = 2;*/
        Console.WriteLine("States recipes:" + recipes.Count);
        foreach (var recipe in recipes)
        {
            recipe.PrintRecipe();
        }
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        Console.WriteLine("Input has changed...");
        searchQuery = e.Value?.ToString() ?? string.Empty; // "??" checks what value is not null and chooses the non-null value.
        Console.WriteLine($"Input changed: {searchQuery}");
    }

    private void OnSearchBarFocus()
    {
        Console.WriteLine("Search bar is active...");
        isSearchBarActive = true;
        StateHasChanged();
    }

    private async Task OnSearchBarBlur()
    {
        // To make sure that we can click the elements in our dropdown items, we have to use this scuffed delay to make
        // sure the item does not disappear, before we can actually click it.
        await Task.Delay(200);
        Console.WriteLine("Search bar is no longer active...");
        isSearchBarActive = false;
        StateHasChanged();
    }

    private void PrintItem()
    {
        Console.WriteLine("Item clicked");
    }

    // Host=mini-basen.crga8yuaes1e.eu-central-1.rds.amazonaws.com;Username=rootgres;Password=Qwerty123;Database=postgres;Port=5432;sslmode=require;
    /*private async Task GetJson()
    {
        Console.WriteLine("Getting json...");
        var fetchQuery = "SELECT id, instructions,recipe_id FROM recipe_instructions";

        try
        {
            await using var connection = new NpgsqlConnection("Host=mini-basen.crga8yuaes1e.eu-central-1.rds.amazonaws.com;Username=rootgres;Password=Qwerty123;Database=postgres;Port=5432;sslmode=require;");
            connection.Open();

            await using var command = new NpgsqlCommand(fetchQuery, connection);
            await using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                // Extract columns
                int id = reader.GetInt32(0); // Get 'id' column
                var jsonData = reader.GetString(1); // Get 'instructions' JSON column
                int recipeId = reader.GetInt32(2); // Get 'recipe_id' column

                Console.WriteLine("JsonData: " + jsonData);

                // Deserialize JSON data into RecipeInstructions class
                var instructions = JsonSerializer.Deserialize<RecipeInstructions>(jsonData);

                // Map everything into a RecipeInstructionRecord object
                var recipeRecord = new RecipeInstructionRecord
                {
                    Instructions = instructions,
                };
                
                recipeRecord.SetId(id);
                recipeRecord.SetRecipeId(recipeId);

                // Output the deserialized data
                Console.WriteLine($"Record ID: {recipeRecord.GetId()}");
                Console.WriteLine($"Recipe Name: {recipeRecord.Instructions.Name}");
                Console.WriteLine($"Recipe ID: {recipeRecord.GetRecipeId()}");
                Console.WriteLine("Steps:");
                foreach (var step in recipeRecord.Instructions.Steps)
                {
                    Console.WriteLine($"  Step {step.StepNumber}: {step.StepText}");
                }

                Console.WriteLine("Notes:");
                foreach (var note in recipeRecord.Instructions.Notes)
                {
                    Console.WriteLine($"  Note {note.NoteNumber}: {note.NoteText}");
                }

                Console.WriteLine("-------------------------");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error getting Json: " + e.Message);
            Console.WriteLine("StackTrace:  " + e.StackTrace);
            throw;
        }
    }*/

}
