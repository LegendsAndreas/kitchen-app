@using WebKitchen.Components.Pages.SharedComponents;
@inject DBService DbService;
@inject IJSRuntime JSRuntime

<EditForm Model="@recipeId" OnSubmit="@HandleGettingRecipe">
    <label class="form-label fw-bold">Recipe ID to delete</label>
    <InputNumber id="name" @bind-Value="recipeId" class="form-control"/>
    <button class="btn btn-primary" type="submit">Get Recipe</button>
</EditForm>

@if (currentRecipe != null)
{
    <PreviewRecipe CurrentPreviewRecipe="@currentRecipe"/>
    <button class="btn btn-danger" @onclick="HandleSubmit">Delete Recipe</button>
}

<StatusMessageToast @ref="RecipeStatusToaster"/>

<!-- Are you sure modal -->
<div class="modal fade" id="are-you-sure" tabindex="-1" aria-labelledby="areYouSure" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="areYouSure">Confirmation</h5>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="confirmAction(true)">
                    Yes
                </button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onclick="confirmAction(false)">No
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    function showAreYouSureModal() {
        const modalElement = document.getElementById("are-you-sure");
        const modalInstance = new bootstrap.Modal(modalElement);
        modalInstance.show();
    }

    // Registering user's response (Yes or No) via JS Interop
    let confirmationResolve;
    window.waitForUserConfirmation = function () {
        return new Promise((resolve) => {
            confirmationResolve = resolve;
        });
    };

    function confirmAction(userConfirmed) {
        if (confirmationResolve) {
            confirmationResolve(userConfirmed);
        }
    }
</script>

@code {

    int recipeId;
    Recipe? currentRecipe;
    StatusMessageToast? RecipeStatusToaster;

    private async Task HandleGettingRecipe()
    {
        currentRecipe = await DbService.GetRecipeById(recipeId);
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("Handling submit delete recipe...");

        if (await AreYouSure())
        {
            var statusMessage = await DbService.DeleteRecipeById(recipeId);
            if (RecipeStatusToaster != null)
                await RecipeStatusToaster.ShowToastAsync(statusMessage);
            
            Console.WriteLine(statusMessage);
        }

        StateHasChanged();
    }

    private async Task<bool> AreYouSure()
    {
        await JSRuntime.InvokeVoidAsync("showAreYouSureModal");
        // Wait for the user's response (true/false)
        return await JSRuntime.InvokeAsync<bool>("waitForUserConfirmation");
    }

}