@using WebKitchen.Components.Pages.SharedComponents
@inject DBService DbService

<EditForm Model="@ingredientName" OnSubmit="@HandleDatabaseNameSubmit">
    <label class="form-label fw-bold">Ingredient Name</label>
    <InputText id="name" @bind-Value="ingredientName" class="form-control"/>

    <button type="submit" class="btn btn-primary">Get Database Ingredient</button>
</EditForm>

@if (ingredientName != string.Empty)
{
    <EditForm Model="@ingredient" OnSubmit="@HandleSubmit">
        <label class="form-label fw-bold">Ingredient Name</label>
        <InputText @bind-Value="ingredient.Name" class="form-control"/>

        <label class="form-label fw-bold">Ingredient Calories</label>
        <InputNumber @bind-Value="ingredient.CaloriesPer100g" class="form-control"/>

        <label class="form-label fw-bold">Ingredient Carbs</label>
        <InputNumber @bind-Value="ingredient.CarbsPer100g" class="form-control"/>

        <label class="form-label fw-bold">Ingredient Protein</label>
        <InputNumber @bind-Value="ingredient.ProteinPer100g" class="form-control"/>

        <label class="form-label fw-bold">Ingredient Fats</label>
        <InputNumber @bind-Value="ingredient.FatsPer100g" class="form-control"/>

        <label class="file-label" for="fileInput">Choose Image</label>
        <InputFile id="fileInput" OnChange="HandleImage" class="hidden-file-input"></InputFile>

        <button type="submit" class="btn btn-primary">Update Database ingredient</button>
    </EditForm>

    <div>
        <p>Database @ingredient.Name Image</p> 
        <img src="data:image/png;base64,@ingredient.Base64Image" alt="Image" class="img-fluid"/>
    </div>
}

<StatusMessageToast @ref="StatusMessageToaster"/>

@code{

    string ingredientName = string.Empty;
    Ingredient ingredient = new();
    StatusMessageToast? StatusMessageToaster;

    private async Task HandleSubmit()
    {
        ingredient.PrintIngredient();
        var result = await DbService.UpdateDbIngredient(ingredient);
        if (StatusMessageToaster != null)
            await StatusMessageToaster.ShowToastAsync(result);
    }

    private async Task HandleDatabaseNameSubmit()
    {
        ingredient = await DbService.GetIngredientByName(ingredientName);
        if (ingredient.GetId() == 0)
        {
            // Popup saying so.
            Console.WriteLine("Ingredient not found.");
        }
    }

    private async Task HandleImage(InputFileChangeEventArgs imageFile)
    {
        foreach (var image in imageFile.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return;
            }

            try
            {
                await ingredient.SetIngredientImage(image);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error setting image: " + ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }
    }

}