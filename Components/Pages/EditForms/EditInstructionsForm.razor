@using WebKitchen.Components.SharedComponents;
@inject DBService DbService

<label class="form-label fw-bold">Recipe Id</label>
<InputNumber id="name" @bind-Value="recipeId" class="form-control"/>

<button type="submit" class="btn btn-primary" @onclick="HandleGettingInstructions">Get Recipe Instructidons</button>

@if (instructions != null)
{
    <div class="row row-cols-2">
        <div class="col">

            <p>@instructions.Instructions.Name</p>

            @foreach (var step in instructions.Instructions.Steps)
            {
                <p>@step.StepNumber <button type="submit" class="btn btn-danger"
                                            @onclick="() => DeleteStep(instructions.Instructions.Steps.IndexOf(step))">
                        <strong>X</strong>
                    </button>
                </p>
                <p>@step.StepText</p>
            }

            @foreach (var note in instructions.Instructions.Notes)
            {
                <p>@note.NoteNumber <button type="submit" class="btn btn-danger"
                                            @onclick="() => DeleteNote(instructions.Instructions.Notes.IndexOf(note))">
                        <strong>X</strong>
                    </button>
                </p>
                <p>@note.NoteText</p>
            }
        </div>

        @* By turning the element into a d-flex flex-column, we display them as a column, instead of displaying each element
        next to each other.
        Then, we space them between each other, to get the forms to display at the top and the button at the bottom. *@
        <div class="col d-flex flex-column justify-content-between">
            @* We encapsulate the forms and buttons into two divs, so that the lowest button gets displayed in the bottom
            right corner. *@
            <div>
                <EditForm Model="@currentStep">
                    <label class="form-label fw-bold">New step text</label>
                    <InputText @bind-Value="stepText" class="form-control"/>

                    <button type="submit" class="btn btn-primary" @onclick="HandleNewStep">Set New Step</button>
                </EditForm>

                <EditForm Model="@currentNote">
                    <label class="form-label fw-bold">New note text</label>
                    <InputText @bind-Value="noteText" class="form-control"/>

                    <button type="submit" class="btn btn-primary" @onclick="HandleNewNote">Set New Note</button>
                </EditForm>

                <p>New step: @currentStep.StepText</p>

                <p>New note: @currentNote.NoteText</p>
            </div>

            @* "d-flex" - activates the flexbox layout, fot the content inside the div. *@
            @* "justify-content-end" - aligns the content to the right side. *@
            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-primary" @onclick="HandleUpdatingInstructions">Update
                    Instructions
                </button>
            </div>
        </div>
    </div>
}

<StatusMessageToast @ref="statusMessageToaster"/>

@code{

    public int recipeId;
    string stepText = "";
    string noteText = "";
    Step currentStep = new();
    Note currentNote = new();
    StatusMessageToast statusMessageToaster = null!;
    RecipeInstructionRecord? instructions;

    private async Task HandleGettingInstructions()
    {
        Console.WriteLine("Handling getting instructions...");
        var result = await DbService.GetRecipeInstructionsByRecipeId(recipeId);
        if (result.instructions == null)
            await statusMessageToaster.ShowToastAsync(result.message);
        else
            instructions = result.instructions;
    }

    private void HandleNewStep()
    {
        currentStep.StepText = stepText;
    }

    private void HandleNewNote()
    {
        currentNote.NoteText = noteText;
    }

    private async Task HandleUpdatingInstructions()
    {
        if (instructions != null)
        {
            currentStep.StepNumber = instructions.Instructions.Steps.Count + 1;
            currentNote.NoteNumber = instructions.Instructions.Notes.Count + 1;

            if (currentStep.StepText != "")
                instructions.Instructions.Steps.Add(currentStep);

            if (currentNote.NoteText != "")
                instructions.Instructions.Notes.Add(currentNote);

            var result = await DbService.UpdateInstructionsByInstructionsId(instructions, instructions.GetId());
            await statusMessageToaster.ShowToastAsync(result);
        }
        else
        {
            Console.WriteLine("Instructions = null");
        }
    }

    private void DeleteStep(int index)
    {
        if (instructions != null)
            instructions.Instructions.Steps.RemoveAt(index);

        StateHasChanged();
    }

    private void DeleteNote(int index)
    {
        if (instructions != null)
            instructions.Instructions.Notes.RemoveAt(index);

        StateHasChanged();
    }

}