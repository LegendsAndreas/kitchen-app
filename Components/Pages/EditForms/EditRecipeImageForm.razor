@using WebKitchen.Components.SharedComponents
@inject IJSRuntime JsRuntime
@inject DBService DbService;

<style>
    .hidden-file-input {
        display: none;
    }

    .file-label {
        padding: 0.5em 1em;
        border-radius: 4px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }
</style>

<EditForm Model="@recipeId" OnSubmit="@HandleGettingRecipe">
    <label class="form-label fw-bold">Recipe ID</label>
    <InputNumber class="form-control" id="name" @bind-Value="recipeId"/>
    <button class="btn btn-primary" type="submit">Get Recipe</button>
</EditForm>

<EditForm Model="@base64Image" OnSubmit="@HandleSubmit">
    <label class="file-label" for="fileInput">Choose Image</label>
    <InputFile id="fileInput" OnChange="HandleImage" class="hidden-file-input"></InputFile>
    <button class="btn btn-primary" type="submit">Update Image</button>
</EditForm>

@if (base64Image != "")
{
    <p>Preview image</p>
    <img src="data:image/png;base64,@base64Image" alt="Recipe Image" style="width: 75%;"/>
}

@if (currentRecipe != null)
{
    <PreviewRecipe CurrentPreviewRecipe="@currentRecipe"/>
}

<NoImageSelectedToast @ref="NoImageToaster"/>
<StatusMessageToast @ref="RecipeStatusToaster"/>

@code{
    int recipeId;
    string base64Image = "";
    string sqlStatusMessage = "";
    Recipe? currentRecipe;
    StatusMessageToast RecipeStatusToaster = null!;
    NoImageSelectedToast? NoImageToaster;

    private async Task HandleGettingRecipe()
    {
        Console.WriteLine("Handling getting recipe...");
        var result = await DbService.GetRecipeById(recipeId);
        if (result.Recipe == null)
            await RecipeStatusToaster.ShowToastAsync(result.Message);
        else
            currentRecipe = result.Recipe;
    }

    private async Task HandleSubmit()
    {
        if (base64Image == "")
        {
            Console.WriteLine("No image selected");
            if (NoImageToaster != null)
                await NoImageToaster.ShowToast();
            return;
        }

        if (currentRecipe != null)
        {
            sqlStatusMessage = await DbService.UpdateRecipeImageByRecipeId(base64Image, currentRecipe.RecipeId);
            await RecipeStatusToaster.ShowToastAsync(sqlStatusMessage);
            currentRecipe.ClearRecipe();
        }
    }

    private async Task HandleImage(InputFileChangeEventArgs imageFile)
    {
        foreach (var image in imageFile.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return;
            }

            try
            {
                var tempRecipe = new Recipe();
                await tempRecipe.SetRecipeImage(image);
                base64Image = tempRecipe.Base64Image;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error setting image: " + ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }
    }

}