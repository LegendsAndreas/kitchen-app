@using WebKitchen.Components.Pages.SharedComponents
@inject IJSRuntime JsRuntime
@inject DBService DbService;

<style>
    .hidden-file-input {
        display: none;
    }
    
    .file-label {
        padding: 0.5em 1em;
        border-radius: 4px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

    .toast-form {
        background-color: #272B2F;
        padding: 25px;
        border-radius: 10px;
        border: 3px solid #48d7ff;
        color: #48d7ff;
        font-family: "Calibri Light", sans-serif;
        font-style: italic;
        font-weight: bold;
    }
</style>

<EditForm Model="@recipeId" OnValidSubmit="@HandleValidSubmit">
    <div>
        <label class="form-label fw-bold">Recipe Name</label>
        <InputNumber class="form-control" id="name" @bind-Value="recipeId"/>
    </div>

    <label class="file-label" for="fileInput">Choose Image</label>
    <InputFile id="fileInput" OnChange="HandleImage" class="hidden-file-input"></InputFile>
    
    <button class="btn btn-primary" type="submit">Update Image</button>
</EditForm>

@if (currentRecipe.Base64Image != "")
{
    <p>Preview image</p>
    <img src="data:image/png;base64,@currentRecipe.Base64Image" alt="Recipe Image" style="width: 75%;"/>
}

@* No image select toaster *@
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="no-image-toast" class="toast toast-form" role="alert" aria-live="assertive" aria-atomic="true"
         data-bs-delay="4000">
        <div>
            No image selected.
        </div>
    </div>
</div>

<script>
    function showNoImageSelectedToast() {
        const toastLiveExample = document.getElementById('no-image-toast');
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
        toastBootstrap.show();
    }
</script>

<RecipeStatusToast @ref="Toast"></RecipeStatusToast>

@code{
    int recipeId;
    Recipe currentRecipe = new();
    RecipeStatusToast? Toast;

    private async Task HandleValidSubmit()
    {
        if (currentRecipe.Base64Image == "")
        {
            Console.WriteLine("No image selected");
            await JsRuntime.InvokeVoidAsync("showNoImageSelectedToast");
            return;
        }
        
        await DbService.UpdateRecipeImageByRecipeId(currentRecipe.Base64Image, currentRecipe.RecipeId);
        currentRecipe.ClearRecipe();
    }
    
    private async Task HandleImage(InputFileChangeEventArgs imageFile)
    {
        foreach (var image in imageFile.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return;
            }

            try
            {
                await currentRecipe.SetRecipeImage(image);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error setting image: "+ex.Message);
                Console.WriteLine(ex.StackTrace);
            }
        }
    }

}