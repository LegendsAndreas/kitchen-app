@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents
@inject DBService DbService
@inject SharedIngredient SharedDbIngredient
@inject SharedIngredientList GlobalIngredients

<div class="row">
    <div class="col-6">
        <EditForm Model="@recipeId">
            <label class="form-label fw-bold">Recipe Id</label>
            <InputNumber id="name" @bind-Value="recipeId" class="form-control"/>

            <button type="submit" class="btn btn-primary" @onclick="HandleSubmit">Get Recipe</button>
        </EditForm>
        @if (currentRecipe != null)
        {
            <PreviewRecipe CurrentPreviewRecipe="@currentRecipe"/>
        }
    </div>


    <div class="col">
        @if (currentRecipe != null)
        {
            <button type="button" class="btn btn-primary" @onclick="UpdateIngredients"> Update ingredients</button>

            <div class="row row-cols-1 row-cols-sd-3 row-cols-md-3 row-cols-lg-3 g-3">
                <div class="col">
                    <RealTimeIngredientSearchBar IngredientsData="@GlobalIngredients.Ingredients"/>
                </div>

                <div class="col">
                    <InputNumber id="name" @bind-Value="currentIngredientGrams" class="form-control"/>
                </div>

                <div class="col">
                    <p>Current ingredient: @(SharedDbIngredient?.SelectedIngredient?.Name ?? "")</p>
                </div>
            </div>
            <button type="button" class="btn btn-primary" @onclick="HandleDbIngredient">Add New Ingredient To Recipe
            </button>

            <AddedIngredients currentIngredients="@currentRecipe.Ingredients"/>
        }
    </div>
</div>

<StatusMessageToast @ref="RecipeStatusToaster"/>

@code{

    int recipeId;
    int currentIngredientGrams;
    Recipe? currentRecipe;
    Ingredient currentIngredient = new();
    StatusMessageToast? RecipeStatusToaster;

    private async Task HandleSubmit()
    {
        Console.WriteLine("Handling getting recipe...");
        var result = await DbService.GetRecipeById(recipeId);
        if (result.Recipe == null)
        {
            if (RecipeStatusToaster != null)
                await RecipeStatusToaster.ShowToastAsync(result.Message);
        }
        else
        {
            currentRecipe = result.Recipe;
        }
    }

    private void DeleteIngredient(int index)
    {
        if (currentRecipe != null)
        {
            currentRecipe.Ingredients.RemoveAt(index);
        }

        StateHasChanged();
    }

    private async Task UpdateIngredients()
    {
        if (currentRecipe == null)
        {
            Console.WriteLine("Recipe is not selected.");
            return;
        }

        currentRecipe.SetTotalMacros();

        var result = await DbService.UpdateRecipeMacrosAndIngredientsById(currentRecipe, currentRecipe.RecipeId);
        if (RecipeStatusToaster != null)
            await RecipeStatusToaster.ShowToastAsync(result);

        currentRecipe = null;
    }

    private void HandleDbIngredient()
    {
        Console.WriteLine("Handling db ingredient...");

        if (currentIngredientGrams == 0)
        {
            Console.WriteLine("No grams specified.");
            return;
        }

        Console.WriteLine("SharedDbIngredient:");
        SharedDbIngredient.SelectedIngredient.PrintIngredient();

        currentIngredient.Name = SharedDbIngredient.SelectedIngredient.Name;
        currentIngredient.Grams = currentIngredientGrams;
        currentIngredient.CaloriesPer100g = SharedDbIngredient.SelectedIngredient.CaloriesPer100g;
        currentIngredient.FatPer100g = SharedDbIngredient.SelectedIngredient.FatPer100g;
        currentIngredient.CarbsPer100g = SharedDbIngredient.SelectedIngredient.CarbsPer100g;
        currentIngredient.ProteinPer100g = SharedDbIngredient.SelectedIngredient.ProteinPer100g;

        HandleIngredient();
    }

    private void HandleIngredient()
    {
        Console.WriteLine("Handling ingredient...");
        var tempIngredient = currentIngredient.TransferIngredient(currentIngredient);
        tempIngredient.PrintIngredient();

        if (currentRecipe != null)
            currentRecipe.Ingredients.Add(tempIngredient);
        currentIngredient.ClearIngredient();
    }

}