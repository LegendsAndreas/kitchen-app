@page "/"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents;
@inject NavigationManager NavigationManager;
@inject DBService DbService;
@inject SharedRecipe SharedDetailRecipe
@inject SharedRecipeList GlobalRecipes

<PageTitle>Recipes</PageTitle>

<div class="container">
    @* Uncomment to access the developer page. *@
    @*<button class="btn btn-primary" onclick="@(() => navigationManager.NavigateTo("/developer"))">Go To developer
    </button>*@

    @if (_loading)
    {
        <Loading LoadingParameter="recipes"/>
    }

    @if (!_loading)
    {
        <PaginatorPage
            CurrentPage="_currentRecipesPage"
            CurrentPageChanged="OnRecipesPageChanged"
            MaxPages="DbService._maxRecipesPages"/>
    }

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @foreach (var recipe in _recipes)
        {
            <div class="col p-2 ">
                <div class="card h-100 generel__border-layout">
                    <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..."
                         class="card-img home home__recipe-image"
                         @onclick="() => NavigateToDetails(recipe)"/>
                    <div class="card-header">
                        <h4>@recipe.RecipeId. @recipe.Name</h4>
                    </div>
                    <div class="card-body border-primary">
                        <p class="card-text ">
                            - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                            - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                            - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                            - Protein: @recipe.TotalMacros.Protein.ToString("0") <br>
                            - Cost: @recipe.TotalCost.ToString("0.00") <br>
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!_loading)
    {
        <PaginatorPage
            CurrentPage="_currentRecipesPage"
            CurrentPageChanged="OnRecipesPageChanged"
            MaxPages="DbService._maxRecipesPages"/>
    }

</div>

<StatusMessageToast @ref="_toaster"/>

@code{

    int _currentRecipesPage = 1;
    bool _loading = true;
    List<Recipe> _recipes = [];
    StatusMessageToast _toaster = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_recipes.Any())
        {
            await DbService.SetTotalVariables();
            await GetRecipes();
        }

        if (!firstRender)
            Console.WriteLine("Not first render.");

        if (GlobalRecipes.Recipes.Any())
            Console.WriteLine("Recipes are full.");
    }

    private async Task OnRecipesPageChanged(int newPage)
    {
        _currentRecipesPage = newPage;
        await GetRecipes();
    }

    private async Task GetRecipes()
    {
        _loading = true;
        try
        {
            var result = await DbService.GetRecipesPaginationAsync(_currentRecipesPage);
            if (result.Recipes != null)
            {
                _recipes = result.Recipes;
            }
            else
            {
                await _toaster.ShowToastAsync("No recipes found");
            }

            _loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting recipes: " + ex.Message);
            Console.WriteLine("StackTrace: " + ex.StackTrace);

            if (ex.Message.Contains("Failed to connect"))
                await _toaster.ShowToastAsync("Failed to connect to database, please reload the page.");
            else
                await _toaster.ShowToastAsync("Connection failure: " + ex.Message);
            _loading = false;
        }
    }

    private void NavigateToDetails(Recipe recipe)
    {
        SharedDetailRecipe.SetSelectedRecipe(recipe);
        SharedDetailRecipe.SelectedRecipe.PrintRecipe();
        NavigationManager.NavigateTo("/recipe-details");
    }

}