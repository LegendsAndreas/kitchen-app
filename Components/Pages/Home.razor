@page "/"
@rendermode InteractiveServer
@inject NavigationManager navigationManager;
@inject DBService DbService;
@inject RecipeStateService statesRecipe
@inject List<Recipe> recipes
<PageTitle>Recipes</PageTitle>

@* ToDo: When you click on the image of a recipe, you get sent to a page with more details and a guide *@
@* ToDo: Finish plan meal page *@
@* ToDo: Have a toast come up when you add a recipe *@
@* ToDo: Toast come up to show that a recipe did not go through because it lacked an ingredient *@

<div class="container">

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @if (recipes.Count != 0)
        {
            @foreach (var recipe in recipes)
            {
                <div class="col" style="padding: 10px">
                    <div class="card h-100">
                        <img src="data:image/png;base64,@recipe.Image" alt="ops..." class="card-img"/>
                        <div class="card-header">
                            <h4>@recipe.Name</h4>
                        </div>
                        <div class="card-body border-primary">
                            <p class="card-text">
                                - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                                - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                                - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                                - Protein: @recipe.TotalMacros.Protein.ToString("0")
                            </p>
                            <button type="submit" class="btn btn-primary" @onclick="() => NavigateToDetails(recipe)">
                                View Details
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

</div>


@code{
    // private List<Recipe> _recipes = new();

    private void NavigateToDetails(Recipe recipe)
    {
        statesRecipe.SetSelectedRecipe(recipe);
        navigationManager.NavigateTo("/recipe-details");
    }

    protected override void OnInitialized()
    {
        Console.WriteLine(recipes.Count);
        if (recipes.Count == 0)
        {
            var img = File.ReadAllBytes("wwwroot/pics/PlaceHolderPic.jpg");
            var base64PlaceHolderPic = Convert.ToBase64String(img);

            recipes.Add(new Recipe
            {
                Number = 1,
                MealType = "D",
                Name = "Recipe 1",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
            recipes.Add(new Recipe
            {
                Number = 2,
                MealType = "D",
                Name = "Recipe 2",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
            recipes.Add(new Recipe
            {
                Number = 3,
                MealType = "D",
                Name = "Recipe 3",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
            recipes.Add(new Recipe
            {
                Number = 4,
                MealType = "D",
                Name = "Recipe 4",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
            recipes.Add(new Recipe
            {
                Number = 5,
                MealType = "D",
                Name = "Recipe 5",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
            recipes.Add(new Recipe
            {
                Number = 6,
                MealType = "D",
                Name = "Recipe 6",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
            recipes.Add(new Recipe
            {
                Number = 7,
                MealType = "D",
                Name = "Recipe 7",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
            recipes.Add(new Recipe
            {
                Number = 8,
                MealType = "D",
                Name = "Recipe 8",
                Image = base64PlaceHolderPic,
                TotalMacros = new Macros
                {
                    Protein = 29,
                    Fat = 66,
                    Carbs = 39,
                    Calories = 657
                }
            });
        }
    }

    /*protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var connection = await DbService.GetConnection();
            if (connection.State == System.Data.ConnectionState.Open)
                Console.WriteLine("Database connection successful");
            else
                Console.WriteLine("Failed to connect to database");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error connecting to recipes db: {e.Message}");
        }

        try
        {
            _recipes = await DbService.GetRecipesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting recipes" + ex);
            throw;
        }
    }*/


}