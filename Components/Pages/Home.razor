@page "/"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents
@inject NavigationManager NavigationManager;
@inject DBService DbService;
@inject SharedRecipe SharedDetailRecipe
@inject SharedRecipeList GlobalRecipes
@inject SharedIngredientList GlobalIngredients

<PageTitle>Recipes</PageTitle>

<div class="container">
    @* Uncomment to access the developer page. *@
    @*<button class="btn btn-primary" onclick="@(() => navigationManager.NavigateTo("/developer"))">Go To developer
    </button>*@

    @if (GlobalRecipes.Recipes.Count == 0)
    {
        <Loading LoadingParameter="recipes"/>
    }

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @if (GlobalRecipes.Recipes.Count != 0)
        {
            @foreach (var recipe in GlobalRecipes.Recipes)
            {
                <div class="col p-2 ">
                    <div class="card h-100 generel__border-layout">
                        <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..."
                             class="card-img home home__recipe-image"
                             @onclick="() => NavigateToDetails(recipe)"/>
                        <div class="card-header">
                            <h4>@recipe.RecipeId. @recipe.Name</h4>
                        </div>
                        <div class="card-body border-primary">
                            <p class="card-text ">
                                - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                                - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                                - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                                - Protein: @recipe.TotalMacros.Protein.ToString("0")
                            </p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

</div>

<StatusMessageToast @ref="_statusMessageToaster"/>

@code{

    StatusMessageToast _statusMessageToaster = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Console.WriteLine("__Rendering Home__");

        if (firstRender && !GlobalRecipes.Recipes.Any())
        {
            try
            {
                var result = await DbService.GetAllRecipes();
                if (result.Recipes == null)
                {
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                }
                else
                {
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                    GlobalRecipes.Recipes = result.Recipes;
                    Console.WriteLine("Acquired Recipes.");
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting recipes: " + ex.Message);
                Console.WriteLine("StackTrace: " + ex.StackTrace);

                if (ex.Message.Contains("Failed to connect"))
                    await _statusMessageToaster.ShowToastAsync("Failed to connect to database, please reload the page.");
                else
                    await _statusMessageToaster.ShowToastAsync("Connection failure: " + ex.Message);

                return;
            }

            /*try
            {
                var result = await DbService.GetAllDbIngredients();
                if (result.DbIngredients == null)
                {
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                }
                else
                {
                    await _statusMessageToaster.ShowToastAsync(result.Message);
                    Console.WriteLine(result.Message);
                    GlobalIngredients.Ingredients = result.DbIngredients;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting ingredients list: " + ex.Message);
                Console.WriteLine("StackTrace: " + ex.StackTrace);

                if (ex.Message.Contains("Failed to connect"))
                    await _statusMessageToaster.ShowToastAsync("Failed to connect to database, please reload the page.");
                else
                    await _statusMessageToaster.ShowToastAsync("Connection failure: " + ex.Message);

                return;
            }*/
        }

        if (!firstRender)
            Console.WriteLine("Not first render.");

        if (GlobalRecipes.Recipes.Any())
            Console.WriteLine("Recipes are full.");
    }

    private void NavigateToDetails(Recipe recipe)
    {
        SharedDetailRecipe.SetSelectedRecipe(recipe);
        SharedDetailRecipe.SelectedRecipe.PrintRecipe();
        NavigationManager.NavigateTo("/recipe-details");
    }

}