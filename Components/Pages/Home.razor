@page "/"
@rendermode InteractiveServer
@* @using WebKitchen.Components.Pages.OnRender *@
@using WebKitchen.Components.SharedComponents
@inject User CurrentUser;
@inject DBService DbService;
@inject SharedRecipe SharedDetailRecipe
@inject SharedRecipeList GlobalRecipes;
@inject NavigationManager navigationManager;

<PageTitle>Recipes</PageTitle>

<div class="container">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @foreach (var recipe in CurrentUser.Recipes)
        {
            <div class="col" style="padding: 10px">
                <div class="card h-100 border-layout">
                    <a href="">
                        <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..." class="card-img"
                             id="home-recipe-image" @onclick="() => NavigateToDetails(recipe)"/>
                    </a>
                    <div class="card-header">
                        <h4>@recipe.RecipeId. @recipe.Name</h4>
                    </div>
                    <div class="card-body border-primary">
                        <p class="card-text">
                            - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                            - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                            - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                            - Protein: @recipe.TotalMacros.Protein.ToString("0")
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@* <button type="button" @onclick="StateUpdate">Update State</button> *@

<StatusMessageToast @ref="statusMessageToaster"/>

@code{

    bool gettingRecipes = false;
    StatusMessageToast? statusMessageToaster;

    private void StateUpdate()
    {
        Console.WriteLine(CurrentUser.GetUserId());
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        CurrentUser.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CurrentUser.OnChange -= StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("__Rendering Home__");

        if (firstRender && !GlobalRecipes.Recipes.Any())
        {
            try
            {
                var result = await DbService.GetAllRecipes();
                if (result.Recipes == null)
                {
                    if (statusMessageToaster != null)
                        await statusMessageToaster.ShowToastAsync(result.Message);
                }
                else
                {
                    if (statusMessageToaster != null)
                        await statusMessageToaster.ShowToastAsync(result.Message);
                    GlobalRecipes.Recipes = result.Recipes;
                    Console.WriteLine("Acquired Recipes.");
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting recipes: " + ex.Message);
                Console.WriteLine("StackTrace: " + ex.StackTrace);

                if (ex.Message.Contains("Failed to connect"))
                {
                    if (statusMessageToaster != null)
                        await statusMessageToaster.ShowToastAsync("Failed to connect to database, please reload the page.");
                }
                else
                {
                    if (statusMessageToaster != null)
                        await statusMessageToaster.ShowToastAsync("Connection failure: " + ex.Message);
                }

                return;
            }

            if (!firstRender)
                Console.WriteLine("Not first render.");

            if (CurrentUser.Recipes.Any())
                Console.WriteLine("Recipes are full.");

            gettingRecipes = false;
        }
    }

    private void NavigateToDetails(Recipe recipe)
    {
        SharedDetailRecipe.SetSelectedRecipe(recipe);
        SharedDetailRecipe.SelectedRecipe.PrintRecipe();
        navigationManager.NavigateTo("/recipe-details");
    }

}