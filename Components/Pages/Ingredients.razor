@page "/ingredients"
@rendermode InteractiveServer
@inject DBService DbService;
@inject List<Ingredient> IngredientsSingleton;
<PageTitle>Ingredients</PageTitle>

<style>
    .ingredient-form {
        background-color: #272B2F;
        padding: 25px;
        border-radius: 10px;
        border: 3px solid #48d7ff;
        color: #48d7ff;
        font-family: "Calibri Light", sans-serif;
        font-style: italic;
        font-weight: bold;
    }
</style>

<PageTitle>Ingredients</PageTitle>

@* Ingredient form *@
<EditForm Model="@currentIngredient" OnValidSubmit="ValidIngredientAsync">
    <DataAnnotationsValidator/>

    <div class="container ingredient-form">
        <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 g-1">
            <div class="col">
                <label class="form-label">
                    Name
                </label>
                <InputText id="name" @bind-Value="currentIngredient.Name"/>
                <ValidationMessage For="@(() => currentIngredient.Name)"/>
            </div>

            <div class="col">
                    <label class="form-label">
                        <strong>Calories</strong>
                    </label>
                    <InputNumber id="cals" @bind-Value="currentIngredient.CaloriesPer100g"/>
                    <ValidationMessage For="@(() => currentIngredient.CaloriesPer100g)"/>
            </div>

            <div class="col">
                    <label class="form-label">
                        <strong>Fats</strong>
                    </label>
                    <InputNumber id="fats" @bind-Value="currentIngredient.FatsPer100g"/>
                    <ValidationMessage For="@(() => currentIngredient.FatsPer100g)"/>
            </div>

            <div class="col">
                    <label class="form-label">
                        <strong>Carbs</strong>
                    </label>
                    <InputNumber id="carbs" @bind-Value="currentIngredient.CarbsPer100g"/>
                    <ValidationMessage For="@(() => currentIngredient.CarbsPer100g)"/>
            </div>

            <div class="col">
                    <label class="form-label">
                        <strong>Protein</strong>
                    </label>
                    <InputNumber id="protein" @bind-Value="currentIngredient.ProteinPer100g"/>
                    <ValidationMessage For="@(() => currentIngredient.ProteinPer100g)"/>
            </div>

            <div class="col">
                    <label class="form-label">
                        <strong>Image</strong>
                    </label>
                    <InputText id="image" @bind-Value="currentIngredient.Base64Image"/>
                    <ValidationMessage For="@(() => currentIngredient.Base64Image)"/>
            </div>

        </div>
        <button type="submit" class="btn btn-primary" style="margin: 5px">Add Ingredient</button>
    </div>
</EditForm>


@* Ingredients list *@
<div class="container">

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @foreach (var ingredient in IngredientsSingleton)
        {
            <div class="col" style="padding: 10px">
                <div class="card h-100">
                    <img src="data:image/png;base64,@ingredient.Base64Image" alt="ops..."
                         class="card-img"/> @* card-img helps the look of the cards. *@
                    <div class="card-header">
                        <h4>@ingredient.Name</h4>
                    </div>
                    <div class="card-body border-primary">
                        <p class="card-text">
                            - Calories: @ingredient.CaloriesPer100g.ToString("0") <br>
                            - Carbs: @ingredient.CarbsPer100g.ToString("0.0") <br>
                            - Fats: @ingredient.FatsPer100g.ToString("0.0") <br>
                            - Protein: @ingredient.ProteinPer100g.ToString("0.0")
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>


</div>


@code {
    private Ingredient currentIngredient = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IngredientsSingleton = await DbService.GetAllDbIngredients();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting ingredients list:" + ex.Message);
            throw;
        }
    }

    private async Task ValidIngredientAsync()
    {
        Ingredient tempIngredient = currentIngredient.TransferIngredient(currentIngredient);
        await DbService.AddIngredientToDb(tempIngredient);
        currentIngredient.ClearIngredient();

        StateHasChanged();
    }

}