@page "/ingredients"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents
@inject DBService DbService;
@inject SharedIngredientList GlobalIngredients;

<PageTitle>Ingredients</PageTitle>

@* Ingredient form *@
<EditForm Model="@currentIngredient" OnValidSubmit="ValidIngredientAsync">
    <DataAnnotationsValidator/>

    <div class="container ingredients__form">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    Name
                </label>
                <InputText @bind-Value="currentIngredient.Name" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Calories</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.CaloriesPer100g" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Fats</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.FatPer100g" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Carbs</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.CarbsPer100g" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Protein</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.ProteinPer100g" class="form-control"/>
                <ValidationMessage For="@(() => currentIngredient.ProteinPer100g)"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Weight</strong>
                </label>
                <InputNumber @bind-Value="_totalIngredientGrams" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Cost</strong>
                </label>
                <InputNumber @bind-Value="_totalIngredientCost" class="form-control"/>
            </div>

            <div
                class="col ingredients__form__col-margin ingredients__form__image-button-mobile d-flex align-items-end">
                <label class="generel__file-label btn btn-primary" for="fileInput">Choose Image</label>
                <InputFile id="fileInput" OnChange="HandleImage" class="d-none"></InputFile>
            </div>

        </div>
        <button type="submit" class="btn btn-primary mt-3">Add Ingredient</button>
    </div>
</EditForm>

@* Ingredients list *@
<div class="container">

    <div class="ingredients__pagination-buttons d-flex justify-content-center my-3">
        <button class="btn btn-primary" @onclick="PrevPage">
            Prev
        </button>
        @foreach (var pageNum in Enumerable.Range(1, _maxPage))
        {
            <button class="btn btn-primary" @onclick="() => SetPageNumber(pageNum)">@pageNum</button>
        }
        <button class="btn btn-primary" @onclick="NextPage">
            Next
        </button>
    </div>

    @if (GlobalIngredients.Ingredients.Count == 0)
    {
        <div class="p-2">
            <Loading LoadingParameter="ingredients"/>
        </div>
    }

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @foreach (var ingredient in GetIngredientsForPage())
        {
            <div class="col p-2">
                <div class="card h-100 generel__border-layout">
                    <img src="data:image/png;base64,@ingredient.Base64Image" alt="ops..."
                         class="card-img"/> @* card-img helps the look of the cards. *@
                    <div class="card-header">
                        <h4>@ingredient.GetId(). @ingredient.Name</h4>
                    </div>
                    <div class="card-body border-primary">
                        <p class="card-text">
                            - Calories: @ingredient.CaloriesPer100g.ToString("0") <br>
                            - Carbs: @ingredient.CarbsPer100g.ToString("0.0") <br>
                            - Fats: @ingredient.FatPer100g.ToString("0.0") <br>
                            - Protein: @ingredient.ProteinPer100g.ToString("0.0") <br>
                            - Cost: @ingredient.GetCostPer100g().ToString("0.0")
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<StatusMessageToast @ref="StatusMessageToaster"/>

@code {
    int _maxPage;
    int _pageNumber = 1;
    int _ingredientsOffset = 40;
    float _totalIngredientGrams;
    float _totalIngredientCost;
    Ingredient currentIngredient = new();
    IBrowserFile? loadedIngredientImage;
    StatusMessageToast StatusMessageToaster = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !GlobalIngredients.Ingredients.Any())
        {
            try
            {
                var result = await DbService.GetAllDbIngredients();
                if (result.DbIngredients == null)
                {
                    await StatusMessageToaster.ShowToastAsync(result.Message);
                }
                else
                {
                    GlobalIngredients.Ingredients = result.DbIngredients;
                    _maxPage = (int)Math.Ceiling((double)GlobalIngredients.Ingredients.Count / _ingredientsOffset);
                    Console.WriteLine("Acquired Ingredients.");
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting Ingredients: " + ex.Message);
                Console.WriteLine("StackTrace: " + ex.StackTrace);
                return;
            }
        }

        if (!firstRender)
            Console.WriteLine("Not first render.");


        if (GlobalIngredients.Ingredients.Any())
            Console.WriteLine("Ingredients are full.");

        // When we go BACK to the ingredient page, '_maxPage' will reset to its original initialized value, so we have to
        // set it again and then encapsulate it in an if statement so that we don't reload indefinably.
        if (GlobalIngredients.Ingredients.Any() && _maxPage == 0)
        {
            _maxPage = (int)Math.Ceiling((double)GlobalIngredients.Ingredients.Count / _ingredientsOffset);
            StateHasChanged();
        }
    }

    private IEnumerable<Ingredient> GetIngredientsForPage()
    {
        var startIndex = (_pageNumber - 1) * _ingredientsOffset;
        var range = GlobalIngredients.Ingredients
            .Skip(startIndex)
            .Take(_ingredientsOffset);

        return range;
    }
    
    private async Task PrevPage()
    {
        Console.WriteLine("Page number" + _maxPage);
        if (_pageNumber == 1)
        {
            Console.WriteLine("Cant lower page further");
            await StatusMessageToaster.ShowToastAsync("Cant lower page further");
            return;
        }

        _pageNumber--;
    }

    private async Task NextPage()
    {
        Console.WriteLine("Page number" + _maxPage);
        if (_pageNumber < _maxPage)
        {
            _pageNumber++;
            return;
        }

        await StatusMessageToaster.ShowToastAsync("Cant increase page further");
    }

    private void SetPageNumber(int pageNumber)
    {
        _pageNumber = pageNumber;
    }

    private Task HandleImage(InputFileChangeEventArgs imageFile)
    {
        // Despite the fact that we iterate over "imageFile", there should always only be one.
        foreach (var image in imageFile.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return Task.CompletedTask;
            }

            try
            {
                loadedIngredientImage = image;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting file: " + ex.Message);
                // Perhaps, display error message.
                return Task.CompletedTask;
            }
        }

        return Task.CompletedTask;
    }

    private async Task ValidIngredientAsync()
    {
        if (loadedIngredientImage == null)
        {
            Console.WriteLine("No image selected.");
            return;
        }

        await currentIngredient.SetIngredientImage(loadedIngredientImage);
        currentIngredient.SetCostPer100G(_totalIngredientGrams, _totalIngredientCost);
        var tempIngredient = currentIngredient.TransferIngredient(currentIngredient);

        var result = await DbService.AddIngredientToDbAsync(tempIngredient);
        await StatusMessageToaster.ShowToastAsync(result.Message);

        currentIngredient.ClearIngredient();
        StateHasChanged();
    }

}