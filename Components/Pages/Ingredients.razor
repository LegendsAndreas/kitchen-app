@page "/ingredients"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents
@inject DBService DbService;

<PageTitle>Ingredients</PageTitle>

@* Ingredient form *@
<EditForm Model="@currentIngredient" OnValidSubmit="AddIngredients">
    <DataAnnotationsValidator/>

    <div class="container ingredients__form">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    Name
                </label>
                <InputText @bind-Value="currentIngredient.Name" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Calories</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.CaloriesPer100g" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Fats</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.FatPer100g" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Carbs</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.CarbsPer100g" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Protein</strong>
                </label>
                <InputNumber @bind-Value="currentIngredient.ProteinPer100g" class="form-control"/>
                <ValidationMessage For="@(() => currentIngredient.ProteinPer100g)"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Weight</strong>
                </label>
                <InputNumber @bind-Value="_totalIngredientGrams" class="form-control"/>
            </div>

            <div class="col ingredients__form__col-margin">
                <label class="ingredients__form__label-mobile">
                    <strong>Cost</strong>
                </label>
                <InputNumber @bind-Value="_totalIngredientCost" class="form-control"/>
            </div>

            <div
                class="col ingredients__form__col-margin ingredients__form__image-button-mobile d-flex align-items-end">
                <label class="generel__file-label btn btn-primary"
                       for="fileInput">@(string.IsNullOrEmpty(currentIngredient.Base64Image) ? "Choose Image" : "Image Chosen")</label>
                <InputFile id="fileInput" OnChange="ChooseImage" class="d-none"></InputFile>
                <label for="use-placeholder-pic">
                    Placeholder?
                    <input type="checkbox" id="use-placeholder-pic" @bind="_usePlaceholderPic"
                           @onclick="UsePlaceholderPic"/>
                </label>
            </div>

        </div>
        <button type="submit" class="btn btn-primary mt-3">Add Ingredient</button>
    </div>
</EditForm>

@* Ingredients list *@
<div class="container">

    @if (_loading)
    {
        <div class="p-2">
            <Loading LoadingParameter="ingredients"/>
        </div>
    }

    @if (!_loading)
    {
        <PaginatorPage
            CurrentPage="_currentIngredientPage"
            CurrentPageChanged="OnIngredientChange"
            MaxPages="DbService._maxIngredientsPages"
        />
    }

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @foreach (var ingredient in _ingredients)
        {
            <div class="col p-2">
                <div class="card h-100 generel__border-layout">
                    <img src="data:image/png;base64,@ingredient.Base64Image" alt="ops..."
                         class="card-img"/> @* card-img helps the look of the cards. *@
                    <div class="card-header">
                        <h4>@ingredient.GetId(). @ingredient.Name</h4>
                    </div>
                    <div class="card-body border-primary">
                        <p class="card-text">
                            - Calories: @ingredient.CaloriesPer100g.ToString("0") <br>
                            - Carbs: @ingredient.CarbsPer100g.ToString("0.0") <br>
                            - Fats: @ingredient.FatPer100g.ToString("0.0") <br>
                            - Protein: @ingredient.ProteinPer100g.ToString("0.0") <br>
                            - Cost: @ingredient.GetCostPer100g().ToString("0.0")
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<StatusMessageToast @ref="StatusMessageToaster"/>

@code {
    int _currentIngredientPage = 1;
    float _totalIngredientGrams;
    float _totalIngredientCost;
    bool _usePlaceholderPic;
    bool _loading = true;
    Ingredient currentIngredient = new();
    IBrowserFile? _loadedIngredientImage;
    StatusMessageToast StatusMessageToaster = null!;
    List<Ingredient> _ingredients = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_ingredients.Any())
        {
            await GetIngredients();
        }

        if (!firstRender)
            Console.WriteLine("Not first render.");

        if (_ingredients.Any())
            Console.WriteLine("Ingredients are full.");
    }

    private async Task GetIngredients()
    {
        _loading = true;
        try
        {
            var result = await DbService.GetIngredientsPaginationAsync(_currentIngredientPage);
            if (result.Ingredients == null)
            {
                await StatusMessageToaster.ShowToastAsync(result.Message);
            }
            else
            {
                _ingredients = result.Ingredients;
                Console.WriteLine("Acquired Ingredients.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error getting Ingredients: " + ex.Message);
            Console.WriteLine("StackTrace: " + ex.StackTrace);
        }

        _loading = false;
        StateHasChanged();
    }


    private async Task OnIngredientChange(int newPage)
    {
        _currentIngredientPage = newPage;
        await GetIngredients();
    }

    private async Task UsePlaceholderPic()
    {
        _usePlaceholderPic = !_usePlaceholderPic;

        try
        {
            if (_usePlaceholderPic)
            {
                string placeholderPath = "wwwroot/pics/PlaceHolderPic.jpg";
                byte[] imageBytes = await File.ReadAllBytesAsync(placeholderPath);
                string base64Image = Convert.ToBase64String(imageBytes);

                currentIngredient.Base64Image = base64Image;
            }
            else
            {
                currentIngredient.Base64Image = "";
            }
        }
        catch (FileNotFoundException)
        {
            Console.WriteLine("PlaceHolderPic.jpg was not found");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error setting image: " + ex.Message);
        }
    }

    private async Task ChooseImage(InputFileChangeEventArgs imageFile)
    {
        foreach (var image in imageFile.GetMultipleFiles())
        {
            if (!image.ContentType.Contains("image"))
            {
                Console.WriteLine($"\"{image.ContentType}\" is not allowed");
                // Popup message saying so.
                return;
            }

            try
            {
                await currentIngredient.SetIngredientImage(image);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting file: " + ex.Message);
                return;
            }
        }

        _usePlaceholderPic = false;
    }

    private async Task AddIngredients()
    {
        if (_totalIngredientGrams == 0 || _totalIngredientCost == 0)
        {
            await StatusMessageToaster.ShowToastAsync("Grams or cost cannot be 0");
            return;
        }

        currentIngredient.SetCostPer100G(_totalIngredientGrams, _totalIngredientCost);
        var tempIngredient = currentIngredient.TransferIngredient(currentIngredient);

        var result = await DbService.AddIngredientToDbAsync(tempIngredient);
        await StatusMessageToaster.ShowToastAsync(result.Message);

        currentIngredient.ClearIngredient();
        _usePlaceholderPic = false;
        StateHasChanged();
    }

}