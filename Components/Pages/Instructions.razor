@page "/instructions"
@inject DBService DbService
@rendermode InteractiveServer

<div class="card">
    <div class="card-body" style="padding: 10px;">
        <EditForm Model="recipeName" OnSubmit="@HandleInstructions">
            <label class="form-label fw-bold">Recipe name:</label>
            <InputText @bind-Value="recipeName" class="form-control"/>

            <button type="submit" class="btn btn-primary instructions-button">Add Recipe Instructions</button>
            @* The user presses a button, which shows a preview of whatever recipe they want to assign instructions to *@
            @*<div id="recipe-preview">
                <div>Recipe name</div>
                <div>Recipe number</div>
                <div>Recipe image</div>
            </div>*@
        </EditForm>
    </div>
</div>

<div class="card" style="margin-top: 10px;">
    <div class="card-body" style="padding: 10px;">
        <EditForm Model="@currentStep" OnSubmit="@HandleSteps">

            <label class="form-label fw-bold">Step number:</label>
            <InputNumber id="step-number" @bind-Value="currentStep.StepNumber" class="form-control"/>

            <label class="form-label fw-bold">Step text:</label>
            <InputText id="step-text" @bind-Value="currentStep.StepText" class="form-control"/>

            <button type="submit" class="btn btn-primary instructions-button">Add Step</button>
        </EditForm>
    </div>
</div>

<div class="card" style="margin-top: 10px; margin-bottom: 10px;">
    <div class="card-body">
        <EditForm Model="@currentNote" OnSubmit="@HandleNotes">

            <label class="form-label fw-bold">Note number:</label>
            <InputNumber @bind-Value="currentNote.NoteNumber" class="form-control"/>

            <label class="form-label fw-bold">Note text:</label>
            <InputText @bind-Value="currentNote.NoteText" class="form-control"/>
            <button type="submit" class="btn btn-primary instructions-button">Add Note</button>
        </EditForm>
    </div>
</div>

@* Steps *@
<div class="accordion" id="accordion-steps">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne"
                    aria-expanded="true" aria-controls="collapseOne">
                Added Steps
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordion-steps">
            <div class="accordion-body">
                @if (recipeInstructionRecord.Instructions.Steps.Count == 0)
                {
                    <p>No steps added</p>
                }

                @foreach (var step in recipeInstructionRecord.Instructions.Steps)
                {
                    <div class="mb-3" style="display:inline-block; margin-right: 10px; padding: 10px;">
                        <span>@step.StepNumber : @step.StepText</span>
                        <button type="button" class="btn btn-danger"
                                @onclick="() => DeleteStep(recipeInstructionRecord.Instructions.Steps.IndexOf(step))">
                            <strong>X</strong>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* Notes *@
<div class="accordion" id="accordion-notes">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo"
                    aria-expanded="true" aria-controls="collapseTwo">
                Added Notes
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordion-notes">
            <div class="accordion-body">
                @if (recipeInstructionRecord.Instructions.Notes.Count == 0)
                {
                    <p>No notes added</p>
                }
                @foreach (var note in recipeInstructionRecord.Instructions.Notes)
                {
                    <div class="mb-3" style="display:inline-block; margin-right: 10px; padding: 10px;">
                        <span>@note.NoteNumber : @note.NoteText</span>
                        <button type="button" class="btn btn-danger"
                                @onclick="() => DeleteNote(recipeInstructionRecord.Instructions.Notes.IndexOf(note))">
                            <strong>X</strong>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {

    RecipeInstructionRecord recipeInstructionRecord = new();
    Step currentStep = new();
    Note currentNote = new();
    string recipeName = "";

    private async Task HandleInstructions()
    {
        Console.WriteLine("Handling instructions...");
        if (recipeName == "")
        {
            Console.WriteLine("No added recipe name");
            return;
        }

        if (recipeInstructionRecord.Instructions.Steps.Count == 0)
        {
            Console.WriteLine("No added steps");
            return;
        }

        recipeInstructionRecord.SetRecipeId(await DbService.GetRecipeIdByName(recipeName));
        if (recipeInstructionRecord.GetRecipeId() == -1)
            return;

        await DbService.AddInstructionToDb(recipeInstructionRecord);
        recipeInstructionRecord.Clear();
    }

    private void HandleSteps()
    {
        Console.WriteLine("Handling steps...");
        if (currentStep.StepNumber <= 0)
        {
            Console.WriteLine("Invalid or no step number added");
            return;
        }

        if (currentStep.StepText == "")
        {
            Console.WriteLine("No step added");
            return;
        }

        var tempStep = currentStep.TransferStepValues(currentStep);
        recipeInstructionRecord.Instructions.Steps.Add(tempStep);
        currentStep.Clear();
    }

    private void HandleNotes()
    {
        Console.WriteLine("handling notes...");
        if (currentNote.NoteNumber <= 0)
        {
            Console.WriteLine("Invalid or no note number added");
            return;
        }

        if (currentNote.NoteText == "")
        {
            Console.WriteLine("No note added");
            return;
        }

        var tempNote = currentNote.TransferNoteValues(currentNote);
        recipeInstructionRecord.Instructions.Notes.Add(tempNote);
        currentNote.Clear();
    }

    private void DeleteStep(int index)
    {
        Console.WriteLine("Deleting step...");
        recipeInstructionRecord.Instructions.Steps.RemoveAt(index);
        StateHasChanged();
    }

    private void DeleteNote(int index)
    {
        Console.WriteLine("Deleting note...");
        recipeInstructionRecord.Instructions.Notes.RemoveAt(index);
        StateHasChanged();
    }

}