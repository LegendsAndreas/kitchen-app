@page "/plan-meals"
@rendermode InteractiveServer
@using WebKitchen.Components.SharedComponents
@inject SharedRecipeList GlobalRecipes;
@inject SharedRecipe SharedSelectedRecipe;
@inject DBService DbService;
@inject IJSRuntime JsRuntime;
<PageTitle>Plan Meals</PageTitle>

<link rel="stylesheet" href="app.css"/>

<style>
    .ingredient-form {
        background-color: #272B2F;
        padding: 25px;
        border-radius: 10px;
        border: 3px solid #48d7ff;
        color: #48d7ff;
        font-family: "Calibri Light", sans-serif;
        font-style: italic;
        font-weight: bold;
    }

    .border-style {
        background-color: #272B2F;
        padding: 25px;
        border-radius: 10px;
        border: 3px solid #48d7ff;
    }

    .alignment {
        display: flex;
        align-items: center;
        justify-content: center;
    }

</style>

@* <button type="button" class="btn btn-primary" @onclick="DisplayWeek">Change State</button> *@

@* Total macros for a day *@
<div class="container ingredient-form">
    <div class="row g-1">
        <div class="col alignment">
            <RealTimeRecipeSearchBar RecipesData="@GlobalRecipes.Recipes"/>
        </div>

        <div class="col alignment">
            <button type="submit" class="btn btn-primary" @onclick="AddRecipeToWeek">Add Recipe</button>
        </div>

        <div class="col alignment">
            @if (currentDay < 6)
            {
                <button type="submit" class="btn btn-primary" @onclick="IncrementCurrentDay">Next Day</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary" @onclick="DisplayWeek">Finish Week</button>
            }
        </div>

        <div class="col alignment">
            <p>Current day is: @(currentDay + 1)</p>
        </div>
    </div>


    @* Current day total macros *@
    <div class="border-style mt-4">
        <button @onclick="PreviousDay" class="btn btn-primary">
            <strong>&lt;</strong>
        </button>
        <button @onclick="NextDay" class="btn btn-primary">
            <strong>></strong>
        </button>

        <div class="row g-1">
            <div class="col alignment">Day @(currentTotalMacrosDay + 1)</div>
            <div class="col alignment">Total
                Calories: @mealPlanMacrosAndRecipes.DailyMealsList[currentTotalMacrosDay].TotalDailyMacros.Calories.ToString("0")</div>
            <div class="col alignment">Total
                Fat: @mealPlanMacrosAndRecipes.DailyMealsList[currentTotalMacrosDay].TotalDailyMacros.Fat.ToString("0")</div>
            <div class="col alignment">Total
                Carbs: @mealPlanMacrosAndRecipes.DailyMealsList[currentTotalMacrosDay].TotalDailyMacros.Carbs.ToString("0")</div>
            <div class="col alignment">Total
                Protein: @mealPlanMacrosAndRecipes.DailyMealsList[currentTotalMacrosDay].TotalDailyMacros.Protein.ToString("0")</div>
        </div>
    </div>

</div>

@* All added recipes *@
<div class="container">

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-1">
        @foreach (var recipe in mealPlanMacrosAndRecipes.DailyMealsList[currentTotalMacrosDay].DailyMeals)
        {
            <div class="col p-2">
                <div class="card h-100 generel__border-layout">
                    <img src="data:image/png;base64,@recipe.Base64Image" alt="ops..."
                         class="card-img"/> @* card-img helps the look of the cards. *@
                    <div class="card-header">
                        <h4>@recipe.Name</h4>
                    </div>
                    <div class="card-body border-primary">
                        <p class="card-text">
                            - Calories: @recipe.TotalMacros.Calories.ToString("0") <br>
                            - Carbs: @recipe.TotalMacros.Carbs.ToString("0") <br>
                            - Fats: @recipe.TotalMacros.Fat.ToString("0") <br>
                            - Protein: @recipe.TotalMacros.Protein.ToString("0")
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

@* Cant go less than 1 toaster *@
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="lower-toast" class="toast ingredient-form" role="alert" aria-live="assertive" aria-atomic="true"
         data-bs-delay="5000">
        <div style="font-size: 20px">
            Cant go lower than day 1.
        </div>
    </div>
</div>

@* Cant go higher than 7 toaster *@
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="higher-toast" class="toast ingredient-form" role="alert" aria-live="assertive" aria-atomic="true"
         data-bs-delay="5000">
        <div style="font-size: 20px">
            Cant go higher than day 7.
        </div>
    </div>
</div>

<script>
    function showInvalidPreviousDayToast() {
        const toastLiveExample = document.getElementById('lower-toast');
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
        toastBootstrap.show();
    }

    function showInvalidNextDayToast() {
        const toastLiveExample = document.getElementById('higher-toast');
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample);
        toastBootstrap.show();
    }
</script>

<StatusMessageToast @ref="statusMessageToaster"/>

@code{

    int currentDay;
    int currentTotalMacrosDay;
    MealPlan mealPlanMacrosAndRecipes = new();
    StatusMessageToast statusMessageToaster = null!;

    protected override void OnInitialized()
    {
        // Console.WriteLine("__Initializing plan meals__");

        if (SharedSelectedRecipe.SelectedRecipe != null)
            SharedSelectedRecipe.SelectedRecipe = null!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Console.WriteLine("__Rendering Plan Meals__");

        if (firstRender && !GlobalRecipes.Recipes.Any())
        {
            try
            {
                var result = await DbService.GetAllRecipes();
                if (result.Recipes == null)
                {
                    await statusMessageToaster.ShowToastAsync(result.Message);
                }
                else
                {
                    GlobalRecipes.Recipes = result.Recipes;
                    Console.WriteLine("Acquired Recipes.");
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error getting recipes: " + ex.Message);
                Console.WriteLine("StackTrace: " + ex.StackTrace);
                await statusMessageToaster.ShowToastAsync($"Error getting recipes: ({ex.Message})");
                return;
            }
        }

        if (!firstRender)
            Console.WriteLine("Not first render.");

        if (GlobalRecipes.Recipes.Any())
            Console.WriteLine("Recipes are full.");
    }

    private void AddRecipeToWeek()
    {
        Console.WriteLine("Adding recipe to week...");
        mealPlanMacrosAndRecipes.AddMacrosAndRecipeToDay(SharedSelectedRecipe.SelectedRecipe, currentDay);

        StateHasChanged();
    }

    private void NextDay()
    {
        if (currentTotalMacrosDay < 6)
            currentTotalMacrosDay++;
        else
            JsRuntime.InvokeVoidAsync("showInvalidNextDayToast");

        StateHasChanged();
    }

    private void PreviousDay()
    {
        if (currentTotalMacrosDay > 0)
            currentTotalMacrosDay--;
        else
            JsRuntime.InvokeVoidAsync("showInvalidPreviousDayToast");

        StateHasChanged();
    }

    private void IncrementCurrentDay()
    {
        currentDay++;
        StateHasChanged();
    }

    private void DisplayWeek()
    {
        Console.WriteLine("Displaying week...");
        StateHasChanged();
    }

}