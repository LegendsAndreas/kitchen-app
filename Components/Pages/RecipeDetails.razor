@page "/recipe-details"
@using System.Net.Mime
@using Microsoft.AspNetCore.Mvc
@using QuestPDF.Companion
@using QuestPDF.Fluent;
@using QuestPDF.Helpers;
@using QuestPDF.Infrastructure;
@using WebKitchen.Components.SharedComponents
@rendermode InteractiveServer
@inject DBService DbService
@inject SharedRecipe SharedDetailedRecipe
@inject IJSRuntime JS

<PageTitle>Recipe Details</PageTitle>

<button type="button" class="btn btn-primary" @onclick="HandleDownloadingPdf">Download PDF</button>

<div class="container border-layout" id="recipe-details">
    @* In case we come a across a string, that is clonger than the column it is in, "text-break" breaks it into smaller strings, so that it does not fuckup the layout *@
    <div class="row text-break">
        <div class="col-8">
            <img src="data:image/png;base64,@sharedRecipe.Base64Image" alt="Recipe Image is gone..."
                 id="recipe-image-style"/>
            <div>
                <h4>Ingredients</h4>
                <ul class="food-list">
                    @foreach (var ingredient in sharedRecipe.Ingredients)
                    {
                        <li>
                            <span class="label">@ingredient.Name&nbsp;</span>
                            <span class="dots"></span>
                            <span class="value">&nbsp;@ingredient.Grams.ToString(".00")g</span>
                        </li>
                    }
                </ul>
            </div>

            <div>
                <h4>Macros</h4>
                <ul class="food-list">
                    <li>
                        <span class="label">Calories&nbsp;</span>
                        <span class="dots"></span>
                        <span class="value">&nbsp;@sharedRecipe.TotalMacros.Calories.ToString(".00")</span>
                    </li>
                    <li>
                        <span class="label">Protein&nbsp;</span>
                        <span class="dots"></span>
                        <span class="value">&nbsp;@sharedRecipe.TotalMacros.Protein.ToString(".00")g</span>
                    </li>
                    <li>
                        <span class="label">Fat&nbsp;</span>
                        <span class="dots"></span>
                        <span class="value">&nbsp;@sharedRecipe.TotalMacros.Fat.ToString(".00")g</span>
                    </li>
                    <li>
                        <span class="label">Carbs&nbsp;</span>
                        <span class="dots"></span>
                        <span class="value">&nbsp;@sharedRecipe.TotalMacros.Carbs.ToString(".00")g</span>
                    </li>
                </ul>
            </div>
        </div>

        <div class="col">
            <h1>@sharedRecipe.Name</h1>
            <div>
                <ol>
                    @if (recipeInstructionRecord != null)
                    {
                        @if (recipeInstructionRecord.Instructions.Steps.Count > 0)
                        {
                            @foreach (var instruction in recipeInstructionRecord.Instructions.Steps)
                            {
                                <li>@instruction.StepText</li>
                            }
                        }
                    }
                    else
                    {
                        <p>No steps added.</p>
                    }
                </ol>

            </div>

            <div>
                <h5>Notes</h5>
                <ul>
                    @if (recipeInstructionRecord != null)
                    {
                        if (recipeInstructionRecord.Instructions.Notes.Count > 0)
                        {
                            foreach (var note in recipeInstructionRecord.Instructions.Notes)
                            {
                                <li>@note.NoteText</li>
                            }
                        }
                        else
                        {
                            <p>No notes added.</p>
                        }
                    }
                    else
                    {
                        <p>No notes added.</p>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<StatusMessageToast @ref="statusMessageToaster"/>

@* The download function from https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-9.0 *@
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

@code {
    Recipe sharedRecipe = new();
    RecipeInstructionRecord? recipeInstructionRecord;
    StatusMessageToast statusMessageToaster = null!;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing recipe details...");
        if (SharedDetailedRecipe?.SelectedRecipe != null)
        {
            sharedRecipe = SharedDetailedRecipe.SelectedRecipe;

            if (sharedRecipe.RecipeId > 0)
            {
                var result = await DbService.GetRecipeInstructionsByRecipeId(sharedRecipe.RecipeId);
                if (result.instructions == null)
                    await statusMessageToaster.ShowToastAsync(result.message);
                else
                    recipeInstructionRecord = result.instructions;
            }
        }
    }

    // Use async, otherwise it won't show up in the companion app.
    private async Task HandleDownloadingPdf()
    {
        Console.WriteLine("Handling making pdf...");
        try
        {
            using var pdfStream = new MemoryStream();
            QuestPDF.Settings.License = LicenseType.Community;

            var pdfDoc = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(20));

                    page.Header().Text($"{sharedRecipe.Name}").SemiBold().FontSize(36).FontColor(Colors.Blue.Medium);

                    page.Content().Column(column =>
                    {
                        // The ingredients and image will be displayed next to each other.
                        column.Item().Row(row =>
                        {
                            row.RelativeItem().Column(ingredients =>
                            {
                                ingredients.Item().Text("Ingredients").Bold().FontSize(20);
                                foreach (var ingredient in sharedRecipe.Ingredients)
                                {
                                    ingredients.Item().Text($"{ingredient.Name} - {ingredient.Grams:F2}g").FontSize(14);
                                }
                            });
                            row.RelativeItem().Column(image =>
                            {
                                var recipeImage = Convert.FromBase64String(sharedRecipe.Base64Image);
                                image.Item().Image(recipeImage); // .ScaleToFit()
                            });
                        });

                        if (recipeInstructionRecord == null)
                        {
                            column.Item().Text("Steps").Bold().FontSize(20);
                            column.Item().Text("- No steps added -").FontSize(14);
                            column.Item().Text("Notes").Bold().FontSize(20);
                            column.Item().Text("- No notes added -").FontSize(14);
                        }
                        else
                        {
                            column.Item().Text("Steps").Bold().FontSize(20);
                            foreach (var step in recipeInstructionRecord.Instructions.Steps)
                            {
                                column.Item().Text($"{step.StepNumber}. {step.StepText}").FontSize(14).Justify();
                            }

                            column.Item().Text("Notes").Bold().FontSize(20);
                            if (recipeInstructionRecord.Instructions.Notes.Count == 0)
                            {
                                column.Item().Text("- No notes added -").FontSize(14);
                            }
                            else
                            {
                                foreach (var note in recipeInstructionRecord.Instructions.Notes)
                                {
                                    column.Item().Text($"{note.NoteNumber}. {note.NoteText}").FontSize(14).Justify();
                                }
                            }
                        }
                    });
                });
            });
            pdfDoc.GeneratePdf(pdfStream);
            // await pdfDoc.ShowInCompanionAsync(); // Delete of comment out this line, when the final product is finished.

            // We reset the position of the stream, so that when we download it, it gets read from the starts.
            pdfStream.Position = 0;

            try
            {
                var fileName = $"{sharedRecipe.Name}.pdf";
                using var streamRef = new DotNetStreamReference(stream: pdfStream);

                // We cant simply pass pdfStream as the stream, because the type is too complex for JavaScript.
                // DotNetStreamReference is a type that allows you to communicate from C# to JavaScript.
                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error downloading PDF: " + ex.Message);
                _ = statusMessageToaster.ShowToastAsync("Error downloading PDF");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error handling making pdf: " + ex.Message);
            _ = statusMessageToaster.ShowToastAsync("Error creating PDF");
            return;
        }
    }

}

