@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using WebKitchen.Components.SharedComponents
@inject User CurrentUser
@inject DBService DbService

@if (CurrentUser.GetUserId() == 0)
{
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#login-modal">Login</button>
}
else
{
    <a type="button" class="btn btn-danger">Logout</a>
}

@* <button type="button" @onclick="PrintId">Print id</button> *@

<!-- Modal -->
<div class="modal fade" id="login-modal" tabindex="-1" aria-labelledby="login-modal-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="login-modal-label">Log in gamer!</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label class="form-label fw-bold">Username</label>
                <InputText @bind-Value="username" class="form-control"/>

                <label class="form-label fw-bold">Password</label>
                <InputText @bind-Value="password" class="form-control"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="ToggleSignIn">Signup</button>
                <button type="button" class="btn btn-primary" @onclick="HandleLogIn">Log on</button>

            </div>
            @if (signUp)
            {
                <div class="modal-body">
                    <label class="form-label fw-bold">Username</label>
                    <InputText @bind-Value="signUpUsername" class="form-control"/>

                    <label class="form-label fw-bold">Email</label>
                    <InputText @bind-Value="signUpEmail" class="form-control"/>

                    <label class="form-label fw-bold">Password</label>
                    <InputText @bind-Value="signUpPassword" class="form-control"/>

                    <label class="form-label fw-bold">Retype Password</label>
                    <InputText @bind-Value="signUpRetypedPassword" class="form-control"/>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="HandleSigningUp">Sign User Up</button>
                </div>
            }
        </div>
    </div>
</div>

<StatusMessageToast @ref="statusMessageToaster"/>

@code{

    bool signUp = false;
    string username = "";
    string password = "";
    string signUpEmail = "";
    string signUpUsername = "";
    string signUpPassword = "";
    string signUpRetypedPassword = "";
    [Required] StatusMessageToast statusMessageToaster;

    private async Task HandleLogIn()
    {
        var result = await DbService.GetUserByUsernameAndPassword(username, password);
        if (result.User == null)
        {
            Console.WriteLine(result.Message);
            return;
        }

        // CurrentUser = result.User.TransferUser(result.User);
        CurrentUser.SetUser(result.User.GetUserId(), result.User.Username, result.User.GetEmail(), result.User.GetPassword(), result.User.Recipes);
        Console.WriteLine(CurrentUser.GetUserId());
        StateHasChanged();
    }

    private void ToggleSignIn()
    {
        signUp = signUp == false;

        StateHasChanged();
    }

    private void PrintId()
    {
        Console.WriteLine(CurrentUser.GetUserId());
    }

    private async Task HandleSigningUp()
    {
        if (signUpPassword != signUpRetypedPassword)
        {
            await statusMessageToaster.ShowToastAsync("Passwords are not the same");
            return;
        }
        var result = await DbService.AddUser(signUpUsername, signUpPassword, signUpEmail);
        if (result.Status)
        {
            await statusMessageToaster.ShowToastAsync(result.Message);
        }
        else
        {
            await statusMessageToaster.ShowToastAsync("Error adding user; "+result.Message);
        }
    }

}