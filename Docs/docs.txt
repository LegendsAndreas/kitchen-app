- "GetIngredientsAsync"
Fuck. What you want to do is "unwrap" the array. That way, you can access the elements of the array directly.
This is to my knowledge the only way of getting the elements of an array, directly.

- InsertMacros.
When ever you squery into a database with custom types, use ROW and ::[TYPE].

-- First, set the sequence to start from 1
ALTER SEQUENCE my_table_id_seq RESTART WITH 1;

-- Optionally set the sequence to the maximum current id + 1 to avoid conflicts in a populated table
SELECT setval('my_table_id_seq', (SELECT MAX(id) FROM my_table) + 1);

- CSS.
Background-color is for the background color and just color is for the color of the text.

- Hot Reloading
When you add a new razor file, while running, the Hot Reload will not update with the new file, so you have to restart
the program.

- Deleting row and sorting the ids.
These three queries resets the id order correctly. Remember to delete the temporary table:
CREATE TEMP TABLE temp_recipes AS
SELECT *, ROW_NUMBER() OVER (ORDER BY id) as new_id
FROM recipes;
UPDATE recipes
SET id = temp_recipes.new_id
FROM temp_recipes
WHERE recipes.id = temp_recipes.id;
SELECT setval('recipes_id_seq', (SELECT MAX(id) FROM recipes));

- Json.
When you want to extract data from a JSON file, the variable names in the class that you are inserting it into HAS to be
the same name as in the JSON file. Or, you can have a different name in your class, and define a JsonPropertyName:
      [JsonPropertyName("name")]
      public string Name { get; set; }
      
- Const.
You cant use the const keyword, along with the new() keyword.

-- This piece of shit:
Despite the fact that the compiler does not mention this, the fact that the @-symbol is on the Model
and not the actual CurrentIngredient variable, will crash the program with an InvalidOperationException.
<EditForm @Model="CurrentIngredient" OnValidSubmit="ValidIngredient">

-- Wha?
I don't fucking understand the below code. The if-statement (statesRecipe != null), throws the warning that it is always 
true and that i might as well just remove it altogether. But when i do, and run the program, it gives me a null reference exception.
And here's the thing, when i run the program with the if statement, with the same paramters and all, it runs just fine and
can access the statesRecipe.Image!
@page "/recipe-details"
@rendermode InteractiveServer
@inject RecipeStateService recipeStatesService
<PageTitle>Recipe Details</PageTitle>

@if (statesRecipe != null)
{
    <div class="container" style="background: #212529">
        @* Col one *@
        <div id="recipe-image">
            <img src="data:image/png;base64,@statesRecipe.Image" alt="Recipe Image is gone..."/>
        </div>

        <div id="recipe-ingredients">

        </div>

        <div id="recipe-macros">

        </div>

        @* Col two *@
        <div id="recipe-name">

        </div>

        <div id="recipe-instructions">

        </div>

        <div id="recipe-notes">

        </div>
    </div>
}

@code {
    Recipe statesRecipe = new();

    protected override void OnInitialized()
    {
        statesRecipe = recipeStatesService.SelectedRecipe;
    }

}

-- Running multiple queries on the same connection.
It is VERY VITAL, that you run each connection in its own wrapped await using statement, otherwise you cant run multiple 
connections on the same connection.

            await using NpgsqlConnection conn = await GetConnection();
            await using var selectCmd = new NpgsqlCommand(selectQuery, conn);
            selectCmd.Parameters.AddWithValue("@id", itemId);
            // selectCmd.Parameters.AddWithValue("@table", table);

            Console.WriteLine("Select Query: " + selectQuery);
            await using (NpgsqlDataReader selectReader = await selectCmd.ExecuteReaderAsync())
            {
                if (await selectReader.ReadAsync())
                {
                    dbItemName = selectReader.GetString(0);
                    dbItemImage = selectReader.GetString(1);
                }
                else
                {
                    Console.WriteLine("Select Query: " + selectQuery);
                    return "Error adding common item; item ID does not exist.";
                }
            }


            // await using var insertCmd = new NpgsqlCommand(insertQuery, conn);
            await using (var insertCmd = new NpgsqlCommand(insertQuery, conn))
            {
                Console.WriteLine("Insert Query: " + insertQuery);
                insertCmd.Parameters.AddWithValue("@id", itemId);
                insertCmd.Parameters.AddWithValue("@name", dbItemName);
                insertCmd.Parameters.AddWithValue("@image", dbItemImage);
                insertCmd.Parameters.AddWithValue("@type", itemTable);
                insertCmd.Parameters.AddWithValue("@price", itemPrice);
                await RunAsyncQuery(insertCmd);
            }

-- What the fuck man?
I added a scoped List<Recipe> in my Program.cs file, where an uninitialized element would be inserted into it upon creation.
Fucking, heresy, of the highest order.
Anyway, the solution was apparently to modify the build scope line to this: builder.Services.AddScoped(provider => new List<Recipe>());.

-- LIFE IS LIKE A MYSTERY, EVERYONE MOST STAND ALONE! I CAN FELL YOU CALL MY NAME, AND IT FEEEEELS LIKE..... HOMEEEEEEE!!!!!!
@inject List<Recipe> recipes
@inject RecipeService recipesService
If you wrap your list of recipes in a class, it will not reset upon entering a new page.
Apparently, a "plain object" like List<Recipes> does not have the "internal logic" to persist themselves across components.
So, if you want something to persist across components, you gotta wrap that thang in a class for itself.

-- WHERE id = 0.
If no rows explicitly have an ID of `X`, the database effectively updates all rows since there is no matching criteria.
So, if no valid WHERE statement is found, it will essentially treat it as if the WHERE statement does not exist in the query.

-- Real time search bar.
You cant use a button, or a type="button", because that fucks with the editforms.

-- Missing ")".
When you hover the mouse at either code bracket, it turns red, which indicates that the content of it gives an error.
BUT, BECAUSE THIS LANGUAGE IS MADE BY A BEING SO DEFFITIENT IN IQ, THAT THE WORDS "IDIOT", "DUMBASS" OR THE LIKE DOES NOT DO JUSTICE,
THE ERROR IS NOT CAUGHT BEFORE COMPILE, ONLY DURING COMPILE TIME!
The error we get during compile time is also only midly useful:
Microsoft.CodeAnalysis.Razor.Compiler\Microsoft.NET.Sdk.Razor.SourceGenerators.RazorSourceGenerator\Components_Pages_EditForms_EditIngredientForm_razor.g.cs(187,15): error CS1026: ) expected.
The problem being that we forgot a parenthises, in the onclick value.

        @if (currentRecipe != null)
        {
            <button class="btn btn-primary" @onclick="()=> UpdateIngredients(currentRecipe.RecipeId" type="button">
                Update ingredients
            </button>
            ...
        }
        
-- SCSS.
Compile the SCSS file with the command: sass LOCATION/SCSS_SHEET.scss SCSS_SHEET.css. This will store the output in
the underlying css file.
Inside your regular stylesheet, you want to reference the new .css file, created from the .scss file, as such:
@import "SCSS_FILE_NAME.css";
Example: sass .\testsheet.scss testsheet.css
Example: @import "testsheet.css";

-- Adding property to existing database custom type
ALTER TYPE *name* ADD ATTRIBUTE *new_type_name* *date_type*.
Note you cant add default value.

-- Error getting recipe by id (44): 42703: column "id" does not exist
const string query = "SELECT id, name, image, meal_type, " +
                     "(macros).total_calories, " +
                     "(macros).total_fats, " +
                     "(macros).total_carbs, " +
                     "(macros).total_protein, " +
                     "cost" +
                     "FROM recipes " +
                     "WHERE id = @id";
                     
The problem here, is that the query looks like: ..., costFrom recipes ...

-- Getting Enter to work with forms.
Place your button, which activates the handle function, inside an Editform. This will make the enter button work properly.

-- SQL Order
    SELECT
    FROM
    JOIN
    WHERE
    GROUP BY
    HAVING
    ORDER BY
