__For instances general purposes__
Just use a lowercase version of them.
Macros = macros.
List<Macros> = macrosList

Ingredient = ingredient.
List<Ingredient> = ingredients

Recipe = recipe.
List<Recipe> = recipes.

__For instances special cases__
You case you want to use Macros for a collective of multiple values, use "TotalMacros".
For cases where you want to use an instance of class temporarily, just add "temp" af the start of the name.

__Function setup__
When a function is called, there has to be a console message that says that it is being activated.
Example: GetRecipeById(), has to have the console message at the start: Console.Writeline("Getting recipe by id...").
The only time, where this is not the case, is when you are calling a function whose job is to print in the console anyway.

__Exception guide__
Exceptions are called "ex". In a try-catch clause, the error message has to display the message, along with a user defined 
message that says what action went wrong, along with the stacktrace.
Example:
try
{
    GetRecipeById();
}
catch (Exception ex)
{
    Console.Writeline("Error getting recipe by id: " + ex.Message);
    Console.Writeline("StackTrace: " + ex.StackTrace)
}

__general lexicon__
- Database Ingredient: An ingredient that has been added to the ingredients table in the database.
- Db/DB: Short for database.

__Return new class__
If you want to add a new class for something, do it like this:
    Class1 tempClass1 = new()
    {
        Variable1 = value1,
        Variable2 = value2,
        ...
    };
    return tempClass1;
This way, you can better modify it, in case the class changes structure. This is especially good if you add a private variable,
since you cant use SetVariable3() in the creation of the class.

__OOP Definition__
The programming diagram, of encapsulating data (variables) and defining what you can do (methods) with said data (An object).