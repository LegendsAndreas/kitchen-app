__For instances general purposes__
Just use a lowercase version of them.
Macros = macros.
List<Macros> = macrosList

Ingredient = ingredient.
List<Ingredient> = ingredients

Recipe = recipe.
List<Recipe> = recipes.

__For instances special cases__
You case you want to use Macros for a collective of multiple values, use "TotalMacros".
For cases where you want to use an instance of class temporarily, just add "temp" af the start of the name.

__Function setup__
When a function is called, there has to be a console message that says that it is being activated.
Example: GetRecipeById(), has to have the console message at the start: Console.Writeline("Getting recipe by id...").
The only time, where this is not the case, is when you are calling a function whose job is to print in the console anyway.

Be specific in how you call something.
For example, don't call a function "GetIngredientsById", rather call it "GetIngredientsByRecipeId". This helps to reduce
confusion on what type of ID we are using to get something.

The order of parameters should, when it comes to what should be changed and by how it should be changed, should be the 
parameter that is changing something and then the parameters that is going by how something should be changed.
Example: UpdateRecipeNameByRecipeId(string updatedName, int recipeId).

Generally speaking with any function in DbService, they should return a tuple that contains either a nullable value, or
a bool value, together with a string message. The function should determine what message will be printed, which is why it
returns a value in the first place.

__Exception guide__
Exceptions are called "ex". In a try-catch clause, the error message has to display the message, along with a user defined 
message that says what action went wrong, along with the stacktrace.
Example:
try
{
    GetRecipeById();
}
catch (Exception ex)
{
    Console.Writeline("Error getting recipe by id: " + ex.Message);
    Console.Writeline("StackTrace: " + ex.StackTrace)
}

__general lexicon__
- Database Ingredient: An ingredient that has been added to the ingredients table in the database.
- Db/DB: Short for database.

__Return new class__
If you want to add a new class for something, do it like this:
    Class1 tempClass1 = new()
    {
        Variable1 = value1,
        Variable2 = value2,
        ...
    };
    return tempClass1;
This way, you can better modify it, in case the class changes structure. This is especially good if you add a private variable,
since you cant use SetVariable3() in the creation of the class.

__OOP Definition__
The programming diagram, of encapsulating data (variables) and defining the procedures/operations (methods) of what you 
can do with said data (An object). The Gang of Four book definition of OOP that I quite like:
Object-oriented programs are made up of objects. An object packages both data and the procedures that operate on that data.

__Updating DB__
When updating an element in the DB, do it ALWAYS by ID. Since the ID is the only TRUE unique thing about every element,
to ensure proper updateage, we always do it by ID.

__SCSS__
First create the file, then when you have added your CSS in the file, use the command: sass .\SCSS_NAME.scss .\SCSS_NAME.css.
Then, in your stylesheet, import the newly created .css file.

In case you HAVE to assign css values via. addressing the nested children of that class, add what html tag you want to do it
to like:
&__accordion-button-margin--button button{
  margin: 0;
}

_PorstgreSQL__
SELECT r.name,
       json_agg(
               json_build_object(
                       'name', i.name,
                       'grams', i.grams,
                       'calories_pr_hectogram', i.calories_pr_hectogram,
                       'fats_pr_hectogram', i.fats_pr_hectogram,
                       'carbs_pr_hectogram', i.carbs_pr_hectogram,
                       'protein_pr_hectogram', i.protein_pr_hectogram,
                       'multiplier', i.multiplier
               )
       ) 
FROM recipes r, unnest(r.ingredients) AS i
GROUP BY r.id, r.name
ORDER BY r.id;

- 'json_agg' creates a JSON array.
- 'json_build_object' a JSON object, which is then but into the JSON array.
- 'unnest' is used to expand the array of ingredients into a set of rows.
- 'GROUP BY' is used to group the rows into the appropriate id.

By grouping on `r.id`, you specify that:
- Rows sharing the same `id` (i.e., related to the same recipe) should be grouped together.
- For each group of rows (one group per `r.id`), the `json_agg` function will aggregate the individual rows into a single JSON array.