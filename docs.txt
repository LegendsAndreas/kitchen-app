- "GetIngredientsAsync"
Fuck. What you want to do is "unwrap" the array. That way, you can access the elements of the array directly.
This is to my knowledge the only way of getting the elements of an array, directly.

- InsertMacros.
When ever you squery into a database with custom types, use ROW and ::[TYPE].

-- First, set the sequence to start from 1
ALTER SEQUENCE my_table_id_seq RESTART WITH 1;

-- Optionally set the sequence to the maximum current id + 1 to avoid conflicts in a populated table
SELECT setval('my_table_id_seq', (SELECT MAX(id) FROM my_table) + 1);

- CSS.
Background-color is for the background color and just color is for the color of the text.

- Deleting row and sorting the ids.
These three queries resets the id order correctly. Remember to delete the temporary table:
CREATE TEMP TABLE temp_recipes AS
SELECT *, ROW_NUMBER() OVER (ORDER BY id) as new_id
FROM recipes;
UPDATE recipes
SET id = temp_recipes.new_id
FROM temp_recipes
WHERE recipes.id = temp_recipes.id;
SELECT setval('recipes_id_seq', (SELECT MAX(id) FROM recipes));

- Json.
When you want to extract data from a JSON file, the variable names in the class that you are inserting it into HAS to be
the same name as in the JSON file. Or, you can have a different name in your class, and define a JsonPropertyName:
      [JsonPropertyName("name")]
      public string Name { get; set; }

-- This piece of shit:
Despite the fact that the compiler does not mention this, the fact that the @-symbol is on the Model
and not the actual CurrentIngredient variable, will crash the program with an InvalidOperationException.
<EditForm @Model="CurrentIngredient" OnValidSubmit="ValidIngredient">

-- Wha?
I dont fucking understand the below code. The if-statement (statesRecipe != null), throws the warning that it is always 
true and that i might as well just remove it altogether. But when i do, and run the program, it gives me a null reference exception.
And here's the thing, when i run the program with the if statement, with the same paramters and all, it runs just fine and
can access the statesRecipe.Image!
@page "/recipe-details"
@rendermode InteractiveServer
@inject RecipeStateService recipeStatesService
<PageTitle>Recipe Details</PageTitle>

@if (statesRecipe != null)
{
    <div class="container" style="background: #212529">
        @* Col one *@
        <div id="recipe-image">
            <img src="data:image/png;base64,@statesRecipe.Image" alt="Recipe Image is gone..."/>
        </div>

        <div id="recipe-ingredients">

        </div>

        <div id="recipe-macros">

        </div>

        @* Col two *@
        <div id="recipe-name">

        </div>

        <div id="recipe-instructions">

        </div>

        <div id="recipe-notes">

        </div>
    </div>
}

@code {
    Recipe statesRecipe = new();

    protected override void OnInitialized()
    {
        statesRecipe = recipeStatesService.SelectedRecipe;
    }

}

-- What the fuck man?
I added a scoped List<Recipe> in my Program.cs file, where an uninitialized element would be inserted into it upon creation.
Fucking, heresy, of the highest order.
Anyway, the solution was apparently to modify the build scope line to this: builder.Services.AddScoped(provider => new List<Recipe>());.